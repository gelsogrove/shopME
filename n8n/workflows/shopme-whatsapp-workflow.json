{
  "name": "My workflow 2",
  "nodes": [
    {
      "parameters": {
        "jsCode": "if ($json.body) {\n  return [{ ...$json.body }];\n} else {\n  return [{ ...$json }];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40,
        -120
      ],
      "id": "5dfb826e-6980-4594-9303-003672782d12",
      "name": "body"
    },
    {
      "parameters": {
        "contextWindowLength": 15
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        840,
        -80
      ],
      "id": "960ba6c2-8188-4aae-bd04-6a60a4c17320",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "options": {
          "maxTokens": "={{ $json.maxTokens }}",
          "temperature": "={{ $json.temperature }}",
          "topP": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        720,
        -80
      ],
      "id": "09b71deb-477d-48bf-bf26-e102dafa04cd",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "0dS4PJki0JIyjUJI",
          "name": "OpenRouter API"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "nome utente: {{ $('Filter').item.json.precompiledData.customer.name }}\nnome azienda: {{ $('Filter').item.json.precompiledData.customer.businessName }}\ndiscount: {{ $('Filter').item.json.precompiledData.customer.discount }}\n\n{{ $('prepare-data').item.json.prompt }}\n\n🚨 RESPOND IN: {{ $('prepare-data').item.json.detectedLanguage }} 🚨"
        },
        "tools": [
          {
            "name": "RagSearch()",
            "type": "ai_tool",
            "parameters": {
              "toolDescription": "Search products, FAQ, services, documents"
            }
          },
          {
            "name": "GetAllProducts()",
            "type": "ai_tool",
            "parameters": {
              "toolDescription": "Show complete product catalog"
            }
          },
          {
            "name": "ContactOperator()",
            "type": "ai_tool",
            "parameters": {
              "toolDescription": "Disable chatbot, connect to human operator"
            }
          },
          {
            "name": "GetAllCategories()",
            "type": "ai_tool",
            "parameters": {
              "toolDescription": "List all product categories"
            }
          },
          {
            "name": "GetActiveOffers()",
            "type": "ai_tool",
            "parameters": {
              "toolDescription": "Show active discounts and promotions"
            }
          },
          {
            "name": "GetOrdersListLink()",
            "type": "ai_tool",
            "parameters": {
              "toolDescription": "Generate secure orders list link"
            }
          },
          {
            "name": "GetLastOrderLink()",
            "type": "ai_tool",
            "parameters": {
              "toolDescription": "Generate secure last order link"
            }
          },
          {
            "name": "GetCustomerProfileLink()",
            "type": "ai_tool",
            "parameters": {
              "toolDescription": "Generate secure profile management link"
            }
          },
          {
            "name": "GetShipmentTrackingLink()",
            "type": "ai_tool",
            "parameters": {
              "toolDescription": "Generate shipment tracking link"
            }
          },
          {
            "name": "GetServices()",
            "type": "ai_tool",
            "parameters": {
              "toolDescription": "Show available services"
            }
          },
          {
            "name": "ConfirmOrderFromConversation()",
            "type": "ai_tool",
            "parameters": {
              "toolDescription": "Confirm order and generate checkout link"
            }
          }
        ]
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        720,
        -260
      ],
      "id": "2a72a257-ee90-408b-8bb3-b02d664d02ba",
      "name": "AI Agent",
      "alwaysOutputData": true,
      "notesInFlow": false,
      "executeOnce": true
    },
    {
      "parameters": {
        "jsCode": "return {\n  message:  $input.first().json.output\n}"
      },
      "id": "4ee2d283-d4af-4a82-9d27-53468898f810",
      "name": "return LLM response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1120,
        -260
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "//const agentConfig =$input.first().json.original.precompiledData.agentConfig\n//const conversationHistory = $input.first().json.precompiledData.customer.conversationHistory\n\nconst messageContent= $input.first().json.messageContent\n\n//const workspaceId = $input.first().json.original.precompiledData.agentConfig.workspaceId\nconst customerLanguage = $input.first().json.precompiledData.customer.language\nconst customerid = $input.first().json.precompiledData.customer.id\n  \nconst temperature = $input.first().json.precompiledData.agentConfig.temperature\nconst maxTokens = $input.first().json.precompiledData.agentConfig.maxTokens\nconst model = $input.first().json.precompiledData.agentConfig.model\nconst conversationHistory = $input.first().json.precompiledData.customer.conversationHistory\nconst prompt = $input.first().json.precompiledData.agentConfig.prompt\nconst phone = $input.first().json.precompiledData.customer.phone\nconst sessionToken= phone\nconst discount = $input.first().json.precompiledData.customer.discount | 0\n\n// 🚨 CRITICAL: Detect language from user message instead of customer record\nfunction detectLanguageFromMessage(message) {\n  if (!message) return 'en';\n  \n  const lowerMessage = message.toLowerCase();\n  \n  // Italian patterns\n  const italianPatterns = [\n    /\\b(ciao|ciao|buongiorno|buonasera|grazie|prego|per favore|scusa|mi dispiace|va bene|ok|si|no)\\b/i,\n    /\\b(ordine|ordini|prodotti|servizi|prezzi|costi|disponibile|disponibili)\\b/i,\n    /\\b(dammi|voglio|vorrei|posso|puoi|hai|avete|quanto|quale|quali)\\b/i,\n    /\\b(ultimo|primo|secondo|terzo|quarto|quinto)\\b/i,\n    /\\b(lista|catalogo|menu|offerte|sconti|promozioni)\\b/i\n  ];\n  \n  // Spanish patterns\n  const spanishPatterns = [\n    /\\b(hola|buenos días|buenas tardes|gracias|por favor|perdón|lo siento|vale|ok|sí|no)\\b/i,\n    /\\b(pedido|pedidos|productos|servicios|precios|costos|disponible|disponibles)\\b/i,\n    /\\b(dame|quiero|me gustaría|puedo|puedes|tienes|tienen|cuánto|cuál|cuáles)\\b/i,\n    /\\b(último|primero|segundo|tercero|cuarto|quinto)\\b/i,\n    /\\b(lista|catálogo|menú|ofertas|descuentos|promociones)\\b/i\n  ];\n  \n  // Portuguese patterns\n  const portuguesePatterns = [\n    /\\b(olá|bom dia|boa tarde|obrigado|por favor|desculpe|sinto muito|ok|sim|não)\\b/i,\n    /\\b(pedido|pedidos|produtos|serviços|preços|custos|disponível|disponíveis)\\b/i,\n    /\\b(dá-me|quero|gostaria|posso|podes|tens|têm|quanto|qual|quais)\\b/i,\n    /\\b(último|primeiro|segundo|terceiro|quarto|quinto)\\b/i,\n    /\\b(lista|catálogo|menu|ofertas|descontos|promoções)\\b/i\n  ];\n  \n  // Count matches for each language\n  let italianMatches = 0;\n  let spanishMatches = 0;\n  let portugueseMatches = 0;\n  \n  italianPatterns.forEach(pattern => {\n    if (pattern.test(lowerMessage)) italianMatches++;\n  });\n  \n  spanishPatterns.forEach(pattern => {\n    if (pattern.test(lowerMessage)) spanishMatches++;\n  });\n  \n  portuguesePatterns.forEach(pattern => {\n    if (pattern.test(lowerMessage)) portugueseMatches++;\n  });\n  \n  // Return the language with most matches\n  if (italianMatches > spanishMatches && italianMatches > portugueseMatches) {\n    return 'it';\n  } else if (spanishMatches > italianMatches && spanishMatches > portugueseMatches) {\n    return 'es';\n  } else if (portugueseMatches > italianMatches && portugueseMatches > spanishMatches) {\n    return 'pt';\n  }\n  \n  // Default to English if no clear pattern\n  return 'en';\n}\n\n// Use detected language from message, fallback to customer language\nconst detectedLanguage = detectLanguageFromMessage(messageContent);\nconst language = detectedLanguage || customerLanguage || 'en';\n\nreturn [\n  {\n    json: {\n      chatInput : messageContent,\n      temperature,\n      maxTokens,\n      model,\n      messages: conversationHistory,\n      sessionId: sessionToken,\n      language, \n      workspaceId: $input.first().json.workspaceId,\n      customerid,\n      prompt,\n      phone,\n      detectedLanguage: detectedLanguage,\n      customerLanguage: customerLanguage\n    },\n \n  }\n];\n"
      },
      "id": "91b56f78-3978-48fe-977c-d9d3bfb25a9c",
      "name": "prepare-data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        420,
        -260
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "const languageRaw = $input.first().json.precompiledData.customer.language || 'en';\nconst language = languageRaw.toLowerCase();\n\nlet messageWip = 'WIP_' + language; // fallback generico\n\nconst wipMessages = $input.first().json.wipMessages;\n\nif (language === 'it') {\n    messageWip = wipMessages.it;\n} else if (language === 'es') {\n    messageWip = wipMessages.es;\n} else if (language === 'en') {\n    messageWip = wipMessages.en;\n} else if (language === 'pt') {\n    messageWip = wipMessages.pt;\n} else if (wipMessages[language]) {\n    messageWip = wipMessages[language]; // supporto per altre lingue future\n}\n\nreturn [\n  {\n    json: {\n      message: messageWip\n    }\n  }\n];\n"
      },
      "id": "34e0094b-deb8-457d-bd13-64cf5c4b70bf",
      "name": "return wip message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        420,
        20
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "528b8754-587f-4381-ae93-a8587ae96468",
              "leftValue": "={{ $json.precompiledData.customer.activeChatbot }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {
          "ignoreCase": false
        }
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        160,
        -120
      ],
      "id": "3ecc53af-42c7-4167-8a71-be111e08c973",
      "name": "Filter",
      "alwaysOutputData": true,
      "executeOnce": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "webhook-start",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "f5aab119-e0d9-4592-ace3-c0e8a2bfa928",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -200,
        -120
      ],
      "webhookId": "3be8d24a-6a91-4a00-94d3-609e253398cb"
    },
    {
      "parameters": {
        "toolDescription": "Search",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/rag-search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "= {\n      \"query\": \"{{ $('prepare-data').item.json.chatInput }}\",\n      \"messages\": \"{{ $('prepare-data').item.json.messages }}\",\n      \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\",\n      \"customerId\": \"{{ $('prepare-data').item.json.customerid }}\"\n    }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        900,
        200
      ],
      "id": "e9c5f53b-ed67-4e1a-bc97-133a5ef6edfd",
      "name": "RagSearch()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Products",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/get-all-products",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\",\n   \"customerId\": \"{{ $('prepare-data').item.json.customerid }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1060,
        200
      ],
      "id": "51a5db0e-6313-402b-b3f0-18081d2170f7",
      "name": "GetAllProducts()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Operator",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/contact-operator",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"phone\": \"{{ $('prepare-data').item.json.phone }}\",\n    \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1240,
        200
      ],
      "id": "3f24aa37-1189-4129-827a-b862706bae01",
      "name": "ContactOperator()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Categories",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/get-all-categories",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\",\n  \"customerId\": \"{{ $('prepare-data').item.json.customerid }}\",\n  \"message\": \"{{ $('prepare-data').item.json.chatInput }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1420,
        200
      ],
      "id": "f2a93f08-8e02-4736-be6a-960ca5e496e9",
      "name": "GetAllCategories()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Offers",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/get-active-offers",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\",\n      \"customerId\": \"{{ $('prepare-data').item.json.customerid }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1600,
        200
      ],
      "id": "aa28abdf-bcdf-46ea-8818-64aeb68fa957",
      "name": "GetActiveOffers()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Orders link but please add the orderCode parameter if the use is looking a fa particolar order number",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/orders-link",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"customerId\": \"{{ $('prepare-data').item.json.customerid }}\",\n  \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\",\n  \"orderCode\": \"{{ $('prepare-data').item.json.orderCode || '' }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1960,
        380
      ],
      "id": "d43c955f-08f6-41d0-a8f3-529e6785cea6",
      "name": "GetOrdersListLink()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Last",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/last-order-link",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"customerId\": \"{{ $('prepare-data').item.json.customerid }}\",\n  \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1960,
        560
      ],
      "id": "get-last-order-link-node",
      "name": "GetLastOrderLink()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Profile",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/profile-link",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"customerId\": \"{{ $('prepare-data').item.json.customerid }}\",\n  \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1960,
        200
      ],
      "id": "get-customer-profile-link-node",
      "name": "GetCustomerProfileLink()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Tracking",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/orders/tracking-link",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\",\n  \"customerId\": \"{{ $('prepare-data').item.json.customerid }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        2140,
        200
      ],
      "id": "9edb87d3-25c2-4c98-8da2-43784cb27809",
      "name": "GetShipmentTrackingLink()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Services",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/get-all-services",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\",\n \"customerId\": \"{{ $('prepare-data').item.json.customerid }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1780,
        200
      ],
      "id": "cb3cc55d-b0e3-4e93-b7ef-d34db555b96e",
      "name": "GetServices()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    },

    {
      "parameters": {
        "toolDescription": "Confirm",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/confirm-order-conversation",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"customerId\": \"{{ $('prepare-data').item.json.customerid }}\",\n  \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\",\n  \"conversationContext\": \"{{ $('prepare-data').item.json.messages }}\",\n  \"prodottiSelezionati\": [\n    {\n      \"nome\": \"Mozzarella di Bufala Campana DOP\",\n      \"quantita\": 4,\n      \"descrizione\": \"Mozzarella di Bufala Campana DOP\",\n      \"codice\": \"MOZ001\"\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        2120,
        200
      ],
      "id": "confirm-order-conversation-node",
      "name": "confirmOrderFromConversation()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "workspaceId": "cm9hjgq9v00014qk8fsdy4ujv",
          "phoneNumber": "393451234567",
          "messageContent": "Ciao, chi sei?",
          "sessionToken": "test-session-123",
          "precompiledData": {
            "agentConfig": {
              "id": "agent-config-test",
              "workspaceId": "cm9hjgq9v00014qk8fsdy4ujv",
              "model": "openai/gpt-4o-mini",
              "temperature": 0.7,
              "maxTokens": 1000,
              "topP": 0.9,
              "prompt": "# 🤖 Virtual Assistant – L'Altra Italia\n\nYou are **the official virtual assistant for 'L'Altra Italia'**, a restaurant and retailer specializing in authentic Italian products, located in **Cervelló, Barcelona**.\n\n🌐 **Website**: https://laltrait.com/\n📍 **Address**: C/ Ull de Llebre 7, 08758, Cervelló (Barcelona)\n📞 **Phone**: (+34) 93 15 91 221\n📧 **Email**: info@laltrait.com\n\n## 🧠 Available Functions\n\nYou have access to these specific functions to help customers:\n\n### � **RagSearch()** - Ricerca Semantica Intelligente\n- **When to use**: Per domande specifiche su prodotti, FAQ, servizi, documenti\n- **Examples**: \"Avete mozzarella?\", \"Come posso pagare?\", \"Regole di trasporto?\"\n- **Note**: Applica automaticamente la strategia prezzi di Andrea (sconto più alto vince)\n\n### 📋 **GetAllProducts()** - Catalogo Completo\n- **When to use**: Quando il cliente chiede di vedere tutti i prodotti o il menu\n- **Examples**: \"Che prodotti avete?\", \"menu completo\", \"catalogo\", \"cosa vendete?\"\n- **Note**: Mostra prezzi finali con strategia prezzi applicata\n\n### 🏢 **GetAllCategories()** - Lista Categorie\n- **When to use**: Per navigazione del catalogo per categorie\n- **Examples**: \"Che categorie avete?\", \"tipi di prodotti\", \"famiglie prodotti\"\n\n### 🏷️ **GetActiveOffers()** - Offerte Attive\n- **When to use**: Quando chiede sconti, offerte, promozioni\n- **Examples**: \"Avete sconti?\", \"offerte attive?\", \"promozioni?\"\n- **Note**: Mostra solo offerte migliori dello sconto cliente\n\n### 🛎️ **GetServices()** - Servizi Disponibili\n- **When to use**: Per informazioni sui servizi offerti\n- **Examples**: \"Che servizi offrite?\", \"trasporto disponibile?\", \"servizi aziendali?\"\n\n### ☎️ **ContactOperator()** - Richiesta Operatore\n- **When to use**: Quando il cliente vuole parlare con un umano\n- **Examples**: \"Voglio un operatore\", \"aiuto umano\", \"chiama qualcuno\"\n- **Note**: Disattiva automaticamente il chatbot per quel cliente\n\n### 📝 **CreateOrder()** - Creazione Ordine\n- **When to use**: SOLO dopo conferma esplicita dell'ordine\n- **Examples**: \"Confermo l'ordine\", \"Order now\", \"Sì, procedi\"\n- **IMPORTANT**: Mostra sempre riassunto e chiedi conferma prima di chiamare questa funzione\n\n## 💰 Strategia Prezzi (Andrea's Logic)\n\n**REGOLA FONDAMENTALE**: Sconto più alto vince (NON cumulativo)\n- Cliente 10% + Offerta 20% → Applica 20%\n- Cliente 25% + Offerta 15% → Applica 25%\n- Quando offerta scade → Torna a sconto cliente\n\n## � Cart Management\n\n**IMPORTANTE**: NON esistono funzioni AddToCart() o GetCart()\n- L'LLM tiene traccia del carrello nella memoria della conversazione\n- Raccogli prodotti/servizi/quantità durante la chat\n- Mostra riassunto e chiedi conferma\n- SOLO dopo conferma esplicita chiama CreateOrder()\n\n**Esempio flusso ordine:**\n1. Cliente: \"Vorrei 2 mozzarelle\"\n2. Tu: Cerchi con RagSearch() o GetAllProducts()\n3. Tu: \"Ho trovato Mozzarella Bufala DOP €7.99. Aggiungo 2 pezzi al tuo ordine\"\n4. Cliente: \"Aggiungi anche trasporto\"\n5. Tu: Cerchi con GetServices()\n6. Tu: \"Riassunto ordine: 2x Mozzarella €15.98 + Trasporto €12.75 = €28.73. Confermi?\"\n7. Cliente: \"Sì, confermo\"\n8. Tu: Chiami CreateOrder() con tutti gli items\n\n## ⚠️ CRITICAL RULES FOR DATA USAGE\n\n**🚨 FUNDAMENTAL - ALWAYS RESPECT THESE RULES:**\n\n1. **USE ONLY RAG DATA**: Use EXCLUSIVELY information from function results. NO external knowledge.\n2. **NEVER INVENT**: If no results, respond appropriately in the user's language\n3. **QUOTE EXACTLY**: Report database information exactly as provided\n4. **TRANSLATE**: Always respond in user's language while maintaining exact meaning\n5. **FUNCTION NAMES**: Use EXACT function names as listed above\n\n## 🌍 User Language\nDetect and respond in the user's language automatically (IT/ES/EN/etc.)\n\n## 🕘 Operating Hours\n**Operators**: Monday-Friday 9:00-18:00\n**Urgent contact**: https://laltrait.com/contacto/\n\n## 🧾 Company Info\n### 🧑‍🍳 Chi Siamo\nVisione per l'eccellenza, attraverso passione e impegno quotidiano.\nLavoriamo con piccoli artigiani nel rispetto della materia prima, della tradizione e dell'origine.\nPer questo ci definiamo veri 'Ambasciatori del gusto.'\n\n### ⚖️ Legal\nConsulta le informazioni legali su: https://laltrait.com/aviso-legal/\n\n## 🗣️ Tone and Style\n- Professional, courteous and friendly\n- Use emojis and markdown formatting for better readability\n- Brief but informative responses\n- Always invite action when appropriate\n- Bold important prices and UPPERCASE for urgent info\n",
              "isActive": true
            },
            "customer": {
              "id": "test-customer-123",
              "name": "Andrea Test User",
              "email": "test@shopme.com",
              "phone": "393451234567",
              "language": "IT",
              "isActive": true,
              "isBlacklisted": false,
              "activeChatbot": true,
              "businessName": "L'Altra Italia(ESP)",
              "businessType": "ECOMMERCE",
              "discount": "0",
              "conversationHistory": [
                {
                  "id": "msg-1",
                  "content": "Ciao",
                  "role": "user",
                  "timestamp": "2025-06-25T15:00:00.000Z"
                },
                {
                  "id": "msg-2",
                  "content": "Ciao! Come posso aiutarti oggi?",
                  "role": "assistant",
                  "timestamp": "2025-06-25T15:00:01.000Z"
                }
              ]
            }
          },
          "wipMessages": {
            "en": "Work in progress. Please contact us later.",
            "es": "Trabajos en curso. Por favor, contáctenos más tarde.",
            "it": "Lavori in corso. Contattaci più tardi.",
            "fr": "Travaux en cours. Veuillez nous contacter plus tard.",
            "de": "Arbeiten im Gange. Bitte kontaktieren Sie uns später.",
            "pt": "Em manutenção. Por favor, contacte-nos mais tarde."
          }
        }
      }
    ]
  },
  "connections": {
    "body": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "return LLM response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepare-data": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "prepare-data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "return wip message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "body",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RagSearch()": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GetAllProducts()": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "ContactOperator()": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GetAllCategories()": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GetActiveOffers()": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GetOrdersListLink()": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GetLastOrderLink()": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GetServices()": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },

    "confirmOrderFromConversation()": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GetShipmentTrackingLink()": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "74695465-a12e-475c-887c-6cab87c1445d",
  "meta": {
    "instanceId": "5ae2a7363ad016a6fce9a21805f9e7da3dfed9cc4777afa6d055110c871b8f65",
    "templateCredsSetupCompleted": true
  },
  "id": "tnwS1XWQNFQGmipS",
  "tags": []
}