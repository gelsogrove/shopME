{
  "name": "My workflow 2",
  "nodes": [
    {
      "parameters": {
        "jsCode": "if ($json.body) {\n  return [{ ...$json.body }];\n} else {\n  return [{ ...$json }];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40,
        -120
      ],
      "id": "5dfb826e-6980-4594-9303-003672782d12",
      "name": "body"
    },
    {
      "parameters": {
        "contextWindowLength": 15
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        840,
        -80
      ],
      "id": "960ba6c2-8188-4aae-bd04-6a60a4c17320",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "options": {
          "maxTokens": "={{ $json.maxTokens }}",
          "temperature": "={{ $json.temperature }}",
          "topP": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        720,
        -80
      ],
      "id": "09b71deb-477d-48bf-bf26-e102dafa04cd",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "0dS4PJki0JIyjUJI",
          "name": "OpenRouter API"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=lingua utente: {{ $json.language }}\nnome utente: {{ $('Filter').item.json.precompiledData.customer.name }}\nnome azienda: {{ $('Filter').item.json.precompiledData.customer.businessName }}\ndiscount   {{ $('Filter').item.json.precompiledData.customer.discount }}\n\n{{ $json.prompt }}\n "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        720,
        -260
      ],
      "id": "2a72a257-ee90-408b-8bb3-b02d664d02ba",
      "name": "AI Agent",
      "alwaysOutputData": true,
      "notesInFlow": false,
      "executeOnce": true
    },
    {
      "parameters": {
        "jsCode": "return {\n  message:  $input.first().json.output\n}"
      },
      "id": "4ee2d283-d4af-4a82-9d27-53468898f810",
      "name": "return LLM response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1120,
        -260
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "//const agentConfig =$input.first().json.original.precompiledData.agentConfig\n//const conversationHistory = $input.first().json.precompiledData.customer.conversationHistory\n\nconst messageContent= $input.first().json.messageContent\n\n//const workspaceId = $input.first().json.original.precompiledData.agentConfig.workspaceId\nconst language =   $input.first().json.precompiledData.customer.language\nconst customerid = $input.first().json.precompiledData.customer.id\n  \nconst temperature = $input.first().json.precompiledData.agentConfig.temperature\nconst maxTokens = $input.first().json.precompiledData.agentConfig.maxTokens\nconst model = $input.first().json.precompiledData.agentConfig.model\nconst conversationHistory = $input.first().json.precompiledData.customer.conversationHistory\nconst prompt = $input.first().json.precompiledData.agentConfig.prompt\nconst phone = $input.first().json.precompiledData.customer.phone\nconst sessionToken=  phone\nconst discount = $input.first().json.precompiledData.customer.discount | 0\nreturn [\n  {\n    json: {\n      chatInput : messageContent,\n      temperature,\n      maxTokens,\n      model,\n      messages: conversationHistory,\n      sessionId: sessionToken,\n      language, \n      workspaceId: $input.first().json.workspaceId,\n      customerid,\n      prompt,\n      phone\n    },\n \n  }\n];\n"
      },
      "id": "91b56f78-3978-48fe-977c-d9d3bfb25a9c",
      "name": "prepare-data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        420,
        -260
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "const languageRaw = $input.first().json.precompiledData.customer.language || 'en';\nconst language = languageRaw.toLowerCase();\n\nlet messageWip = 'WIP_' + language; // fallback generico\n\nconst wipMessages = $input.first().json.wipMessages;\n\nif (language === 'it') {\n    messageWip = wipMessages.it;\n} else if (language === 'es') {\n    messageWip = wipMessages.es;\n} else if (language === 'en') {\n    messageWip = wipMessages.en;\n} else if (language === 'pt') {\n    messageWip = wipMessages.pt;\n} else if (wipMessages[language]) {\n    messageWip = wipMessages[language]; // supporto per altre lingue future\n}\n\nreturn [\n  {\n    json: {\n      message: messageWip\n    }\n  }\n];\n"
      },
      "id": "34e0094b-deb8-457d-bd13-64cf5c4b70bf",
      "name": "return wip message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        420,
        20
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "528b8754-587f-4381-ae93-a8587ae96468",
              "leftValue": "={{ $json.precompiledData.customer.activeChatbot }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {
          "ignoreCase": false
        }
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        160,
        -120
      ],
      "id": "3ecc53af-42c7-4167-8a71-be111e08c973",
      "name": "Filter",
      "alwaysOutputData": true,
      "executeOnce": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "webhook-start",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "f5aab119-e0d9-4592-ace3-c0e8a2bfa928",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -200,
        -120
      ],
      "webhookId": "3be8d24a-6a91-4a00-94d3-609e253398cb"
    },
    {
      "parameters": {
        "toolDescription": "üîç **RAGSEARCH() - SISTEMA DI RICERCA SEMANTICA AVANZATA CON STRATEGIA PREZZI**\n\n**COSA FA QUESTA FUNZIONE:**\nRicerca semantica intelligente che interroga TUTTE le fonti di conoscenza del business (prodotti, FAQ, servizi, documenti) e applica automaticamente la strategia prezzi con sconti cliente e offerte attive.\n\n**TABELLE DATABASE CONSULTATE:**\nüìä **PRODUCTS** - Ricerca prodotti per similitudine semantica con embedding\n‚ùì **FAQS** - Cerca domande frequenti e risposte correlate alla query\nüîß **SERVICES** - Trova servizi disponibili correlati alla richiesta\nüìÑ **DOCUMENTS** - Ricerca documenti caricati (PDF, regolamenti, policy)\nüë§ **CUSTOMERS** - Recupera sconto personalizzato del cliente (discount %)\nüè∑Ô∏è **OFFERS** - Controlla offerte attive per categoria/globali con date validit√†\nüè¢ **CATEGORIES** - Verifica associazioni categoria-prodotto per offerte specifiche\n\n**FLUSSO DI ESECUZIONE:**\n1Ô∏è‚É£ **Ricerca Parallela**: Embedding search su products/faqs/services/documents\n2Ô∏è‚É£ **Recupero Customer**: Estrae discount% dalla tabella customers\n3Ô∏è‚É£ **Calcolo Offerte**: Trova offerte attive (startDate <= NOW <= endDate)\n4Ô∏è‚É£ **Strategia Prezzi NON-CUMULATIVA**: Sconto pi√π alto vince (cliente vs migliore offerta)\n5Ô∏è‚É£ **Calcolo Finale**: Applica sconto vincente e calcola prezzi finali\n\n**STRATEGIA PREZZI (Andrea's Logic):**\nüí∞ **NON-CUMULATIVO**: Se cliente ha 10% e Black Friday 20% ‚Üí Usa 20%\nüèÜ **Migliore Vince**: Confronta sconto cliente vs migliore offerta attiva\nüìÖ **Time-Based**: Quando Black Friday finisce ‚Üí Torna a sconto cliente 10%\nüéØ **Per Categoria**: Offerte specifiche per categoria vs offerte globali\n\n**ESEMPI DI QUERY CHE ATTIVANO RAGSEARCH:**\n- \"Avete mozzarella di bufala?\" ‚Üí Cerca nei PRODUCTS\n- \"Quanto costa il servizio di trasporto?\" ‚Üí Cerca nei SERVICES  \n- \"Che regole devo seguire per il trasporto?\" ‚Üí Cerca nei DOCUMENTS\n- \"Come posso pagare?\" ‚Üí Cerca nelle FAQS\n- \"What kind of wine do you have?\" ‚Üí Multilingua su PRODUCTS\n- \"Avete sconti attivi?\" ‚Üí Controlla OFFERS e customer.discount\n\n**OUTPUT STRUTTURATO:**\n```json\n{\n  \"businessType\": \"ECOMMERCE\",\n  \"products\": [{\n    \"similarity\": 0.85,\n    \"product\": {\n      \"name\": \"Mozzarella Bufala DOP\",\n      \"originalPrice\": 9.99,\n      \"finalPrice\": 7.99,\n      \"hasDiscount\": true,\n      \"discountPercent\": 20,\n      \"discountSource\": \"offer\",\n      \"discountName\": \"Black Friday 2024\"\n    }\n  }],\n  \"faqs\": [...],\n  \"services\": [...],\n  \"documents\": [...]\n}\n```\n\nIMPORTANTE\nSemantic search for products, FAQs, services, and documents. The query must be in English. The agent translates user queries before calling this function.\n\n\n",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/rag-search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "= {\n      \"query\": \"{{ $('prepare-data').item.json.chatInput }}\",\n      \"messages\": \"{{ $('prepare-data').item.json.messages }}\",\n      \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\",\n      \"customerId\": \"{{ $('prepare-data').item.json.customerid }}\"\n    }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        900,
        200
      ],
      "id": "e9c5f53b-ed67-4e1a-bc97-133a5ef6edfd",
      "name": "RagSearch()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "üìã **GETALLPRODUCTS() - CATALOGO COMPLETO CON STRATEGIA PREZZI**\n\n**COSA FA QUESTA FUNZIONE:**\nRestituisce l'INTERO catalogo prodotti del workspace con applicazione automatica della strategia prezzi di Andrea (sconto pi√π alto vince tra cliente e offerte attive).\n\n**TABELLE DATABASE CONSULTATE:**\nüìä **PRODUCTS** - Tutti i prodotti attivi del workspace con prezzi e stock\nüë§ **CUSTOMERS** - Recupera sconto personalizzato cliente (discount %)\nüè∑Ô∏è **OFFERS** - Controlla offerte attive per calcolo migliore sconto\nüè¢ **CATEGORIES** - Include informazioni categoria per ogni prodotto\n\n**LOGICA PREZZI APPLICATA:**\nüí∞ **NON-CUMULATIVO**: Se cliente ha 15% e offerta 20% ‚Üí Applica 20%\nüèÜ **MIGLIORE VINCE**: Confronta sempre sconto cliente vs offerte attive\nüìà **PREZZO FINALE**: Calcola automaticamente prezzo scontato\nüéØ **TRASPARENZA**: Mostra prezzo originale, finale, % sconto e fonte\n\n**ESEMPI DI QUERY CHE ATTIVANO GETALLPRODUCTS:**\n**ITALIANO:**\n- \"mi fai vedere la lista dei prodotti?\"\n- \"catalogo completo\"\n- \"che prodotti avete?\"\n- \"menu\"\n- \"cosa vendete?\"\n- \"tutti i prodotti disponibili\"\n\n**ENGLISH:**\n- \"show me all products\"\n- \"product catalog\"\n- \"what do you sell?\"\n- \"complete menu\"\n\n**SPANISH:**\n- \"¬øqu√© productos tienen?\"\n- \"cat√°logo completo\"\n- \"lista de productos\"\n\n**OUTPUT STRUTTURATO:**\n```json\n{\n  \"success\": true,\n  \"products\": [{\n    \"name\": \"Mozzarella Bufala DOP\",\n    \"price\": 7.99,\n    \"originalPrice\": 9.99,\n    \"discountPercent\": 20,\n    \"discountSource\": \"offer\",\n    \"formatted\": \"Prezzo: ‚Ç¨7.99 (scontato del 20%, prezzo pieno ‚Ç¨9.99, fonte: offer)\",\n    \"category\": \"Formaggi\",\n    \"stock\": 25,\n    \"available\": true\n  }],\n  \"customerInfo\": {\n    \"name\": \"Mario Rossi\",\n    \"discount\": 15\n  },\n  \"discountLogic\": {\n    \"note\": \"Andrea's Logic: Highest discount wins\",\n    \"customerDiscount\": 15\n  }\n}\n```\n\n**IMPORTANTE:** Usa questa funzione per QUALSIASI richiesta di vedere prodotti o menu, indipendentemente dalla lingua o formulazione.",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/get-all-products",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\",\n   \"customerId\": \"{{ $('prepare-data').item.json.customerid }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1060,
        200
      ],
      "id": "51a5db0e-6313-402b-b3f0-18081d2170f7",
      "name": "GetAllProducts()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "‚òéÔ∏è **CONTACTOPERATOR() - RICHIESTA OPERATORE UMANO**\n\n**COSA FA QUESTA FUNZIONE:**\nDisattiva automaticamente il chatbot per il cliente e segnala la richiesta di assistenza umana al sistema. Prepara il passaggio a un operatore reale.\n\n**TABELLE DATABASE CONSULTATE:**\nüë§ **CUSTOMERS** - Trova il cliente tramite phone e workspaceId\nüîÑ **CUSTOMERS UPDATE** - Imposta activeChatbot = false per disattivare il bot\n\n**FLUSSO DI ESECUZIONE:**\n1Ô∏è‚É£ **Ricerca Cliente**: Trova customer tramite phone + workspaceId\n2Ô∏è‚É£ **Disattivazione Bot**: Imposta activeChatbot = false nel database\n3Ô∏è‚É£ **Conferma Sistema**: Restituisce messaggio di conferma\n4Ô∏è‚É£ **Segnalazione**: Il sistema notifica la richiesta operatore\n\n**ORARI OPERATORI:**\nüïò **Luned√¨ - Venerd√¨**: 09:00 - 18:00\nüö´ **Weekend**: Non disponibili\nüìß **Urgenze**: Modulo contatto https://laltrait.com/contacto/\n\n**ESEMPI DI QUERY CHE ATTIVANO CONTACTOPERATOR:**\n**ITALIANO:**\n- \"voglio parlare con un operatore\"\n- \"serve aiuto umano\"\n- \"chiama qualcuno\"\n- \"operatore per favore\"\n- \"assistenza umana\"\n- \"non riesco, aiuto\"\n\n**ENGLISH:**\n- \"I need to speak with an operator\"\n- \"human help please\"\n- \"call someone\"\n- \"I need assistance\"\n\n**SPANISH:**\n- \"necesito hablar con un operador\"\n- \"ayuda humana por favor\"\n- \"quiero asistencia\"\n\n**OUTPUT STRUTTURATO:**\n```json\n{\n  \"success\": true,\n  \"message\": \"Certo, verr√† contattato il prima possibile dal nostro operatore.\"\n}\n```\n\n**IMPORTANTE:** Dopo questa chiamata il chatbot sar√† disattivato per quel cliente fino a riattivazione manuale.",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/contact-operator",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"phone\": \"{{ $('prepare-data').item.json.phone }}\",\n    \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1240,
        200
      ],
      "id": "3f24aa37-1189-4129-827a-b862706bae01",
      "name": "ContactOperator()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "üè¢ **GETALLCATEGORIES() - CATALOGO CATEGORIE COMPLETE**\n\n**COSA FA QUESTA FUNZIONE:**\nRestituisce tutte le categorie di prodotti disponibili nel workspace con conteggio prodotti per categoria e informazioni strutturate per la navigazione del catalogo.\n\n**TABELLE DATABASE CONSULTATE:**\nüè¢ **CATEGORIES** - Tutte le categorie attive del workspace\nüìä **PRODUCTS** - Conta prodotti per categoria (solo attivi)\nüîó **RELATIONS** - Verifica associazioni categoria-prodotto\n\n**FLUSSO DI ESECUZIONE:**\n1Ô∏è‚É£ **Recupero Categorie**: Trova tutte le categorie attive del workspace\n2Ô∏è‚É£ **Conteggio Prodotti**: Calcola quanti prodotti attivi per categoria\n3Ô∏è‚É£ **Organizzazione**: Ordina categorie alfabeticamente\n4Ô∏è‚É£ **Formattazione**: Struttura risposta per assistente\n\n**INFORMAZIONI FORNITE:**\nüìã **Nome Categoria**: Denominazione completa\nüî¢ **Conteggio Prodotti**: Numero prodotti attivi nella categoria\nüìù **Descrizione**: Eventuale descrizione categoria\nüéØ **Navigazione**: Dati per filtraggio prodotti\n\n**ESEMPI DI QUERY CHE ATTIVANO GETALLCATEGORIES:**\n**ITALIANO:**\n- \"che categorie avete?\"\n- \"tipi di prodotti\"\n- \"settori merceologici\"\n- \"classificazioni prodotti\"\n- \"famiglie di prodotti\"\n\n**ENGLISH:**\n- \"what categories do you have?\"\n- \"product categories\"\n- \"types of products\"\n- \"product classifications\"\n\n**SPANISH:**\n- \"¬øqu√© categor√≠as tienen?\"\n- \"tipos de productos\"\n- \"clasificaciones\"\n\n**OUTPUT STRUTTURATO:**\n```json\n{\n  \"success\": true,\n  \"total_categories\": 5,\n  \"categories\": [{\n    \"id\": \"cat123\",\n    \"name\": \"Formaggi\",\n    \"description\": \"Formaggi italiani DOP e IGP\",\n    \"productCount\": 12,\n    \"active\": true\n  }],\n  \"response_message\": \"Abbiamo 5 categorie principali: Formaggi (12 prodotti), Pasta (8 prodotti)...\"\n}\n```\n\n**IMPORTANTE:** Utile per navigazione catalogo e presentazione strutturata dell'offerta.",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/get-all-categories",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\",\n  \"customerId\": \"{{ $('prepare-data').item.json.customerid }}\",\n  \"message\": \"{{ $('prepare-data').item.json.chatInput }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1420,
        200
      ],
      "id": "f2a93f08-8e02-4736-be6a-960ca5e496e9",
      "name": "GetAllCategories()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "üè∑Ô∏è **GETACTIVEOFFERS() - OFFERTE E SCONTI ATTIVI**\n\n**COSA FA QUESTA FUNZIONE:**\nRecupera tutte le offerte attualmente attive nel workspace con logica di comparazione sconti cliente vs offerte. Applica la strategia prezzi di Andrea per determinare il miglior sconto disponibile.\n\n**TABELLE DATABASE CONSULTATE:**\nüè∑Ô∏è **OFFERS** - Offerte attive con date validit√† (startDate <= NOW <= endDate)\nüë§ **CUSTOMERS** - Sconto personalizzato cliente per comparazione\nüè¢ **CATEGORIES** - Associazioni offerta-categoria per offerte specifiche\nüìÖ **DATE_VALIDATION** - Controllo automatico scadenze offerte\n\n**FLUSSO DI ESECUZIONE:**\n1Ô∏è‚É£ **Recupero Cliente**: Estrae sconto cliente se customerId fornito\n2Ô∏è‚É£ **Filtro Temporale**: Trova offerte con startDate <= NOW <= endDate\n3Ô∏è‚É£ **Logica Andrea**: Confronta sconto cliente vs ogni offerta\n4Ô∏è‚É£ **Ranking**: Ordina per sconto pi√π alto\n5Ô∏è‚É£ **Formattazione**: Evidenzia solo offerte migliori del cliente\n\n**STRATEGIA PREZZI (Andrea's Logic):**\nüí∞ **COMPARAZIONE**: Confronta customer.discount vs offer.discountPercent\nüèÜ **MIGLIORE VINCE**: Mostra solo offerte che superano sconto cliente\nüìÖ **TIME-SENSITIVE**: Solo offerte attive nella finestra temporale\nüéØ **CATEGORIA-SPECIFICA**: Gestisce offerte globali e per categoria\n\n**ESEMPI DI QUERY CHE ATTIVANO GETACTIVEOFFERS:**\n**ITALIANO:**\n- \"avete sconti attivi?\"\n- \"che offerte avete?\"\n- \"promozioni in corso\"\n- \"ci sono saldi?\"\n- \"sconti disponibili\"\n\n**ENGLISH:**\n- \"do you have active offers?\"\n- \"current promotions\"\n- \"any discounts available?\"\n- \"sales or deals?\"\n\n**SPANISH:**\n- \"¬øtienen ofertas activas?\"\n- \"promociones actuales\"\n- \"descuentos disponibles\"\n\n**OUTPUT STRUTTURATO:**\n```json\n{\n  \"success\": true,\n  \"customer\": {\n    \"name\": \"Mario Rossi\",\n    \"discount\": 15\n  },\n  \"offers\": [{\n    \"name\": \"Black Friday 2024\",\n    \"discountPercent\": 25,\n    \"isOfferBetterThanCustomer\": true,\n    \"bestDiscount\": 25,\n    \"discountSource\": \"offer\",\n    \"categories\": [\"Formaggi\", \"Pasta\"],\n    \"validUntil\": \"2024-11-30T23:59:59Z\",\n    \"description\": \"Super sconto su prodotti selezionati\"\n  }],\n  \"message\": \"Offerte attive migliori del tuo sconto (15%): Black Friday 25% su Formaggi e Pasta\"\n}\n```\n\n**IMPORTANTE:** Mostra solo offerte che offrono sconto migliore rispetto a quello del cliente.",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/get-active-offers",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\",\n      \"customerId\": \"{{ $('prepare-data').item.json.customerid }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1600,
        200
      ],
      "id": "aa28abdf-bcdf-46ea-8818-64aeb68fa957",
      "name": "GetActiveOffers()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "üîó **GETORDERSLISTLINK() - LINK PUBBLICO STORICO ORDINI**\n\n**COSA FA QUESTA FUNZIONE:**\nGenera un token sicuro e restituisce il link pubblico locale per visualizzare lo storico ordini.\n\n**ENDPOINT USATO:** POST /api/internal/generate-token (action=orders)\n\n**COME RISPONDERE (TOKEN-ONLY):**\n- **ORDERS**: http://localhost:3000/orders-public?token={{$json.token}}\n- Se l'utente chiede un ordine specifico (es. 2001), aggiungi anche: http://localhost:3000/orders-public/2001?token={{$json.token}}\n\n**TRIGGER ESEMPI:**\n- \"dammi la lista ordini\", \"i miei ordini\", \"order history\", \"dammi l'ordine 2001\"\n\n**IMPORTANTE:** Link usano solo token parameter (TOKEN-ONLY)\n",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/generate-token",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"customerId\": \"{{ $('prepare-data').item.json.customerid }}\",\n  \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\",\n  \"action\": \"orders\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1960,
        380
      ],
      "id": "d43c955f-08f6-41d0-a8f3-529e6785cea6",
      "name": "GetOrdersListLink()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "üë§ **GETCUSTOMERPROFILELINK() - LINK GESTIONE PROFILO CLIENTE**\n\n**COSA FA QUESTA FUNZIONE:**\nGenera un token sicuro (tipo: profile) e restituisce il link pubblico per la gestione del profilo cliente (modifica email, telefono, indirizzo).\n\n**ENDPOINT USATO:** POST /api/internal/generate-token (action=profile)\n\n**COME RISPONDERE (TOKEN-ONLY):**\n- Profilo: [LINK_URL] (sostituisci con il linkUrl dalla risposta API)\n\n**TRIGGER ESEMPI:**\n- \"modifico mio indirizzo\", \"cambia email\", \"aggiorna telefono\"\n- \"voglio cambiare i miei dati\", \"modifica profilo\"\n\n**IMPORTANTE:** Link usa solo token parameter (TOKEN-ONLY)\n",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/generate-token",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"customerId\": \"{{ $('prepare-data').item.json.customerid }}\",\n  \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\",\n  \"action\": \"profile\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1960,
        200
      ],
      "id": "get-customer-profile-link-node",
      "name": "GetCustomerProfileLink()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "üöö **GETSHIPMENTTRACKINGLINK() - TRACKING SPEDIZIONE DHL**\n\n**COSA FA QUESTA FUNZIONE:**\nRecupera il link di tracking DHL per l'ultimo ordine in elaborazione del cliente. Fornisce informazioni complete sulla spedizione con link cliccabile per il monitoraggio in tempo reale.\n\n**TABELLE DATABASE CONSULTATE:**\nüì¶ **ORDERS** - Ultimo ordine con status PROCESSING del cliente\nüöö **TRACKING_INFO** - Informazioni tracking number e link DHL\nüë§ **CUSTOMERS** - Verifica cliente e workspace associato\n\n**FLUSSO DI ESECUZIONE:**\n1Ô∏è‚É£ **Recupero Cliente**: Verifica customerId e workspaceId\n2Ô∏è‚É£ **Ricerca Ordine**: Trova ultimo ordine con status PROCESSING\n3Ô∏è‚É£ **Estrazione Tracking**: Recupera trackingNumber se disponibile\n4Ô∏è‚É£ **Generazione Link**: Costruisce link DHL con tracking number\n5Ô∏è‚É£ **Formattazione**: Struttura risposta con link cliccabile\n\n**ESEMPI DI QUERY CHE ATTIVANO GETSHIPMENTTRACKINGLINK:**\n**ITALIANO:**\n- \"dov'√® la mia merce?\"\n- \"dove √® il mio ordine?\"\n- \"tracking spedizione\"\n- \"dove √® il pacco?\"\n- \"numero tracking\"\n- \"stato spedizione\"\n- \"quando arriva?\"\n\n**ENGLISH:**\n- \"where is my order?\"\n- \"shipment tracking\"\n- \"tracking number\"\n- \"where is my package?\"\n- \"delivery status\"\n- \"when will it arrive?\"\n\n**SPANISH:**\n- \"¬ød√≥nde est√° mi pedido?\"\n- \"seguimiento de env√≠o\"\n- \"n√∫mero de seguimiento\"\n- \"¬ød√≥nde est√° mi paquete?\"\n- \"estado de entrega\"\n\n**OUTPUT STRUTTURATO:**\n```json\n{\n  \"success\": true,\n  \"orderId\": \"ord123\",\n  \"orderCode\": \"ORD-2025-001\",\n  \"status\": \"PROCESSING\",\n  \"trackingNumber\": \"1234567890\",\n  \"trackingUrl\": \"https://www.dhl.com/global-en/home/tracking/tracking-express.html?tracking-id=1234567890\",\n  \"message\": \"Il tuo ordine ORD-2025-001 √® in elaborazione. Tracking: https://www.dhl.com/...\"\n}\n```\n\n**IMPORTANTE:** Restituisce null se non ci sono ordini in elaborazione o se il tracking number non √® ancora disponibile.",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/orders/tracking-link",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\",\n  \"customerId\": \"{{ $('prepare-data').item.json.customerid }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        2140,
        200
      ],
      "id": "9edb87d3-25c2-4c98-8da2-43784cb27809",
      "name": "GetShipmentTrackingLink()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "üõéÔ∏è **GETSERVICES() - CATALOGO SERVIZI CON PREZZI PERSONALIZZATI**\n\n**COSA FA QUESTA FUNZIONE:**\nRestituisce tutti i servizi disponibili nel workspace con applicazione automatica della strategia prezzi di Andrea. Confronta sconto cliente vs sconto specifico del servizio e applica il migliore.\n\n**TABELLE DATABASE CONSULTATE:**\nüõéÔ∏è **SERVICES** - Tutti i servizi attivi con prezzi e descrizioni\nüë§ **CUSTOMERS** - Sconto personalizzato cliente (discount %)\nüí∞ **PRICE_LOGIC** - Calcolo automatico prezzi finali\n\n**FLUSSO DI ESECUZIONE:**\n1Ô∏è‚É£ **Recupero Servizi**: Trova tutti i servizi attivi del workspace\n2Ô∏è‚É£ **Recupero Cliente**: Estrae sconto cliente se customerId fornito\n3Ô∏è‚É£ **Logica Andrea**: Confronta customer.discount vs service.discountPercent\n4Ô∏è‚É£ **Calcolo Prezzi**: Applica sconto pi√π alto (NON-cumulativo)\n5Ô∏è‚É£ **Formattazione**: Struttura risposta con prezzi finali\n\n**STRATEGIA PREZZI (Andrea's Logic):**\nüí∞ **NON-CUMULATIVO**: Se cliente 10% e servizio 15% ‚Üí Usa 15%\nüèÜ **MIGLIORE VINCE**: Math.max(customerDiscount, serviceDiscountPercent)\nüìä **TRASPARENZA**: Mostra prezzo originale, finale, % e fonte sconto\nüéØ **FONTE SCONTO**: \"customer\" | \"service\" | \"none\"\n\n**ESEMPI DI QUERY CHE ATTIVANO GETSERVICES:**\n**ITALIANO:**\n- \"che servizi offrite?\"\n- \"quali servizi avete?\"\n- \"lista dei servizi\"\n- \"servizi disponibili\"\n- \"servizi aziendali\"\n- \"cosa fate oltre ai prodotti?\"\n\n**ENGLISH:**\n- \"what services do you offer?\"\n- \"show me your services\"\n- \"available services\"\n- \"what services do you provide?\"\n\n**SPANISH:**\n- \"¬øqu√© servicios ofrecen?\"\n- \"servicios disponibles\"\n- \"lista de servicios\"\n\n**OUTPUT STRUTTURATO:**\n```json\n{\n  \"success\": true,\n  \"customerInfo\": {\n    \"name\": \"Mario Rossi\",\n    \"discount\": 10\n  },\n  \"services\": [{\n    \"name\": \"Trasporto Refrigerato\",\n    \"description\": \"Consegna con mezzi refrigerati\",\n    \"price\": 12.75,\n    \"originalPrice\": 15.00,\n    \"discountPercent\": 15,\n    \"discountSource\": \"service\",\n    \"formatted\": \"Prezzo: ‚Ç¨12.75 (scontato del 15%, prezzo pieno ‚Ç¨15.00, fonte: service)\",\n    \"available\": true,\n    \"customerDiscount\": 10,\n    \"serviceDiscount\": 15,\n    \"bestDiscount\": 15\n  }],\n  \"discountLogic\": {\n    \"note\": \"Andrea's Logic: Highest discount wins (applied to services)\",\n    \"customerDiscount\": 10\n  }\n}\n```\n\n**IMPORTANTE:** Ogni servizio mostra il prezzo finale con il miglior sconto disponibile tra cliente e servizio specifico.",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/get-all-services",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\",\n \"customerId\": \"{{ $('prepare-data').item.json.customerid }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1780,
        200
      ],
      "id": "cb3cc55d-b0e3-4e93-b7ef-d34db555b96e",
      "name": "GetServices()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    },

    {
      "parameters": {
        "toolDescription": "üõí **CONFIRMORDERFROMCONVERSATION() - CONFERMA ORDINE DALLA CONVERSAZIONE**\n\n**COSA FA QUESTA FUNZIONE:**\nPassa ultimi 10 messaggi al backend per parsing automatico di prodotti e servizi, generando link checkout sicuro.\n\n**PARAMETRI RICHIESTI:**\n- conversationContext: Ultimi 10 messaggi della conversazione (utente + LLM)\n- workspaceId: ID del workspace\n- customerId: ID del cliente\n\n**OUTPUT:**\n- checkoutToken: Token sicuro per accesso frontend\n- checkoutUrl: URL per pagina riepilogo ordine\n- totalAmount: Totale calcolato\n- response: Messaggio di conferma per utente\n\n**ESEMPI DI ATTIVAZIONE:**\n- \"S√¨, confermo l'ordine\"\n- \"Procedi con l'ordine\"\n- \"Va bene, ordina\"\n- \"Conferma\"\n\n**IMPORTANTE:**\n- Passa ultimi 10 messaggi per parsing completo\n- Backend far√† parsing automatico con LLM interno\n- Genera token sicuro per frontend interattivo\n- Frontend permette aggiunta/rimozione prodotti prima conferma finale",
        "method": "POST",
        "url": "=http://host.docker.internal:3001/api/internal/confirm-order-conversation",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"conversationContext\": \"{{ $('prepare-data').item.json.messages }}\",\n  \"workspaceId\": \"{{ $('prepare-data').item.json.workspaceId }}\",\n  \"customerId\": \"{{ $('prepare-data').item.json.customerid }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        2120,
        200
      ],
      "id": "confirm-order-conversation-node",
      "name": "confirmOrderFromConversation()",
      "credentials": {
        "httpBasicAuth": {
          "id": "7CEUQjT9iAyh1utW",
          "name": "Backend API Basic Auth"
        }
      }
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "workspaceId": "cm9hjgq9v00014qk8fsdy4ujv",
          "phoneNumber": "393451234567",
          "messageContent": "Ciao, chi sei?",
          "sessionToken": "test-session-123",
          "precompiledData": {
            "agentConfig": {
              "id": "agent-config-test",
              "workspaceId": "cm9hjgq9v00014qk8fsdy4ujv",
              "model": "openai/gpt-4o-mini",
              "temperature": 0.7,
              "maxTokens": 1000,
              "topP": 0.9,
              "prompt": "# ü§ñ Virtual Assistant ‚Äì L'Altra Italia\n\nYou are **the official virtual assistant for 'L'Altra Italia'**, a restaurant and retailer specializing in authentic Italian products, located in **Cervell√≥, Barcelona**.\n\nüåê **Website**: https://laltrait.com/\nüìç **Address**: C/ Ull de Llebre 7, 08758, Cervell√≥ (Barcelona)\nüìû **Phone**: (+34) 93 15 91 221\nüìß **Email**: info@laltrait.com\n\n## üß† Available Functions\n\nYou have access to these specific functions to help customers:\n\n### ÔøΩ **RagSearch()** - Ricerca Semantica Intelligente\n- **When to use**: Per domande specifiche su prodotti, FAQ, servizi, documenti\n- **Examples**: \"Avete mozzarella?\", \"Come posso pagare?\", \"Regole di trasporto?\"\n- **Note**: Applica automaticamente la strategia prezzi di Andrea (sconto pi√π alto vince)\n\n### üìã **GetAllProducts()** - Catalogo Completo\n- **When to use**: Quando il cliente chiede di vedere tutti i prodotti o il menu\n- **Examples**: \"Che prodotti avete?\", \"menu completo\", \"catalogo\", \"cosa vendete?\"\n- **Note**: Mostra prezzi finali con strategia prezzi applicata\n\n### üè¢ **GetAllCategories()** - Lista Categorie\n- **When to use**: Per navigazione del catalogo per categorie\n- **Examples**: \"Che categorie avete?\", \"tipi di prodotti\", \"famiglie prodotti\"\n\n### üè∑Ô∏è **GetActiveOffers()** - Offerte Attive\n- **When to use**: Quando chiede sconti, offerte, promozioni\n- **Examples**: \"Avete sconti?\", \"offerte attive?\", \"promozioni?\"\n- **Note**: Mostra solo offerte migliori dello sconto cliente\n\n### üõéÔ∏è **GetServices()** - Servizi Disponibili\n- **When to use**: Per informazioni sui servizi offerti\n- **Examples**: \"Che servizi offrite?\", \"trasporto disponibile?\", \"servizi aziendali?\"\n\n### ‚òéÔ∏è **ContactOperator()** - Richiesta Operatore\n- **When to use**: Quando il cliente vuole parlare con un umano\n- **Examples**: \"Voglio un operatore\", \"aiuto umano\", \"chiama qualcuno\"\n- **Note**: Disattiva automaticamente il chatbot per quel cliente\n\n### üìù **CreateOrder()** - Creazione Ordine\n- **When to use**: SOLO dopo conferma esplicita dell'ordine\n- **Examples**: \"Confermo l'ordine\", \"Order now\", \"S√¨, procedi\"\n- **IMPORTANT**: Mostra sempre riassunto e chiedi conferma prima di chiamare questa funzione\n\n## üí∞ Strategia Prezzi (Andrea's Logic)\n\n**REGOLA FONDAMENTALE**: Sconto pi√π alto vince (NON cumulativo)\n- Cliente 10% + Offerta 20% ‚Üí Applica 20%\n- Cliente 25% + Offerta 15% ‚Üí Applica 25%\n- Quando offerta scade ‚Üí Torna a sconto cliente\n\n## ÔøΩ Cart Management\n\n**IMPORTANTE**: NON esistono funzioni AddToCart() o GetCart()\n- L'LLM tiene traccia del carrello nella memoria della conversazione\n- Raccogli prodotti/servizi/quantit√† durante la chat\n- Mostra riassunto e chiedi conferma\n- SOLO dopo conferma esplicita chiama CreateOrder()\n\n**Esempio flusso ordine:**\n1. Cliente: \"Vorrei 2 mozzarelle\"\n2. Tu: Cerchi con RagSearch() o GetAllProducts()\n3. Tu: \"Ho trovato Mozzarella Bufala DOP ‚Ç¨7.99. Aggiungo 2 pezzi al tuo ordine\"\n4. Cliente: \"Aggiungi anche trasporto\"\n5. Tu: Cerchi con GetServices()\n6. Tu: \"Riassunto ordine: 2x Mozzarella ‚Ç¨15.98 + Trasporto ‚Ç¨12.75 = ‚Ç¨28.73. Confermi?\"\n7. Cliente: \"S√¨, confermo\"\n8. Tu: Chiami CreateOrder() con tutti gli items\n\n## ‚ö†Ô∏è CRITICAL RULES FOR DATA USAGE\n\n**üö® FUNDAMENTAL - ALWAYS RESPECT THESE RULES:**\n\n1. **USE ONLY RAG DATA**: Use EXCLUSIVELY information from function results. NO external knowledge.\n2. **NEVER INVENT**: If no results, say \"Non ho informazioni specifiche su questo\"\n3. **QUOTE EXACTLY**: Report database information exactly as provided\n4. **TRANSLATE**: Always respond in user's language while maintaining exact meaning\n5. **FUNCTION NAMES**: Use EXACT function names as listed above\n\n## üåç User Language\nDetect and respond in the user's language automatically (IT/ES/EN/etc.)\n\n## üïò Operating Hours\n**Operators**: Monday-Friday 9:00-18:00\n**Urgent contact**: https://laltrait.com/contacto/\n\n## üßæ Company Info\n### üßë‚Äçüç≥ Chi Siamo\nVisione per l'eccellenza, attraverso passione e impegno quotidiano.\nLavoriamo con piccoli artigiani nel rispetto della materia prima, della tradizione e dell'origine.\nPer questo ci definiamo veri 'Ambasciatori del gusto.'\n\n### ‚öñÔ∏è Legal\nConsulta le informazioni legali su: https://laltrait.com/aviso-legal/\n\n## üó£Ô∏è Tone and Style\n- Professional, courteous and friendly\n- Use emojis and markdown formatting for better readability\n- Brief but informative responses\n- Always invite action when appropriate\n- Bold important prices and UPPERCASE for urgent info\n",
              "isActive": true
            },
            "customer": {
              "id": "test-customer-123",
              "name": "Andrea Test User",
              "email": "test@shopme.com",
              "phone": "393451234567",
              "language": "IT",
              "isActive": true,
              "isBlacklisted": false,
              "activeChatbot": true,
              "businessName": "L'Altra Italia(ESP)",
              "businessType": "ECOMMERCE",
              "discount": "0",
              "conversationHistory": [
                {
                  "id": "msg-1",
                  "content": "Ciao",
                  "role": "user",
                  "timestamp": "2025-06-25T15:00:00.000Z"
                },
                {
                  "id": "msg-2",
                  "content": "Ciao! Come posso aiutarti oggi?",
                  "role": "assistant",
                  "timestamp": "2025-06-25T15:00:01.000Z"
                }
              ]
            }
          },
          "wipMessages": {
            "en": "Work in progress. Please contact us later.",
            "es": "Trabajos en curso. Por favor, cont√°ctenos m√°s tarde.",
            "it": "Lavori in corso. Contattaci pi√π tardi.",
            "fr": "Travaux en cours. Veuillez nous contacter plus tard.",
            "de": "Arbeiten im Gange. Bitte kontaktieren Sie uns sp√§ter.",
            "pt": "Em manuten√ß√£o. Por favor, contacte-nos mais tarde."
          }
        }
      }
    ]
  },
  "connections": {
    "body": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "return LLM response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepare-data": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "prepare-data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "return wip message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "body",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RagSearch()": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GetAllProducts()": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "ContactOperator()": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GetAllCategories()": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GetActiveOffers()": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GetOrdersListLink()": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GetServices()": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },

    "confirmOrderFromConversation()": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GetShipmentTrackingLink()": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "74695465-a12e-475c-887c-6cab87c1445d",
  "meta": {
    "instanceId": "5ae2a7363ad016a6fce9a21805f9e7da3dfed9cc4777afa6d055110c871b8f65",
    "templateCredsSetupCompleted": true
  },
  "id": "tnwS1XWQNFQGmipS",
  "tags": []
}