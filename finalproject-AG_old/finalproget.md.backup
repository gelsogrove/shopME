## Index

0. [Project information](#0-project-information)
1. [General product description](#1-general-product-description)
2. [System architecture](#2-system-architecture)
3. [Data model](#3-data-model)
4. [API specification](#4-api-specification)
5. [User stories](#5-user-stories)
6. [Work tickets](#6-work-tickets)
7. [Security](#7-security)
8. [CI/CD & Deployment](#8-cicd--deployment)

---

## 0. Project information

### **0.1. Andrea Gelsomino**

### **0.2. ShopMe**

### **0.3. Brief project description:**
ShopMe is a multilingual SaaS platform (Italian, English, Spanish) that transforms WhatsApp into a complete sales and customer service channel. Businesses can deploy AI-powered chatbots that handle customer inquiries, manage orders, provide product information, and send digital documents like invoices - all through WhatsApp without requiring technical knowledge. The system automates routine support tasks, delivers targeted promotional notifications, and offers 24/7 availability to enhance customer engagement and satisfaction.

### **0.4. Project URL:**
*Not available*

### 0.5. Repository URL or compressed file
*Not available*

---

## 1. General product description

### **1.1. Objective:**

ShopMe helps businesses manage customer interactions through WhatsApp. The AI chatbot executes function calls during conversations to handle customer requests. When a customer asks about an invoice, the system finds it and sends a download link, while also answering questions about products, orders, and other information.

The platform helps businesses:
- Provide 24/7 customer service and handle routine questions automatically without additional staff
- Offer service directly through WhatsApp
- Send push notifications with special offers and promotions
- Build customer loyalty through fast responses

### **1.2. Key features and functionalities:**

ShopMe transforms WhatsApp into a sales and service channel with these key features:

The platform supports multiple businesses with isolated workspaces. Each business manages their product catalog, offers, services, Faq.

The system sends scheduled notifications for new offers keeping customers engaged.

Business owners can customize settings including branding, language support (Italian, English, Spanish), and AI behavior parameters (temperature, token limits, etc).

All sensitive operations use secure temporary links rather than being handled in chat conversations.

### **1.3. Design and user experience:**

User interaction happens through WhatsApp. Customers message a business number, receive a registration link, and then interact with the AI assistant to ask questions, place orders, and manage their account.

The platform includes an admin panel where business owners can manage:
- AI Prompts and settings
- Products and categories
- Special offers
- Customer data
- Performance metrics


![Chat History](./chatHistory.png)
![Products](./products.png)
![Agent configuration](./agentConfiguration.png)


### **1.4. Installation instructions:**

Currently in development.

---

## 2. System architecture

### **2.1. Architecture diagram:**

```
+------------------------+        +------------------------+
|                        |        |                        |
|   React + TypeScript   |<------>|   Node.js Express      |
|   TailwindCSS          |  REST  |   Domain-Driven Design |
|                        |  API   |                        |
+------------------------+        +------------------------+
            |                               |
            v                               v
+------------------------+        +------------------------+
|                        |        |                        |
|   WhatsApp Business    |        |   PostgreSQL + Prisma  |
|   API                  |        |   Database             |
|                        |        |                        |
+------------------------+        +------------------------+
            ^                               ^
            |                               |
            +---------------+---------------+
                            |
                            v
                  +--------------------+
                  |                    |
                  |    OpenRouter      |
                  |    LLM Service     |
                  |                    |
                  +--------------------+
```

### **2.2. Description of main components:**

- **Frontend**: React with TypeScript and Tailwind CSS for the admin interface where businesses manage products, offers, services, faq and monitor customer interactions.

- **Backend**: Node.js Express application using Domain-Driven Design architecture to handle business logic and API routes.

- **Data Layer**: Prisma ORM with PostgreSQL database.

- **External Services**:
  - **WhatsApp Business API**: For customer communication
  - **OpenrRouter / LLM Services**: Powers the AI chatbot
  - **Payment Gateway**: Handles secure payments

### **2.3. High-level project description**

The project follows a Domain-Driven Design architecture with clear separation of concerns:

**Backend Architecture**
- **Domain Layer**: Core business entities and rules
- **Application Layer**: Use cases and business operations
- **Infrastructure Layer**: Database access and external services
- **Interface Layer**: API endpoints and controllers

**Frontend Architecture**
- Component-based React application with Tailwind CSS
- State management with React contexts
- Service modules for API communication

**Database**
- PostgreSQL with Prisma ORM

### **2.4. Security**

ShopMe implements these security measures:

1. **Authentication**:
   - JWT-based authentication with short-lived tokens
   - Refresh tokens in HTTP-only cookies
   - Rate limiting on authentication endpoints

2. **Secure Operations**:
   - Sensitive operations use time-limited secure links
   - Encrypted tokens with expiration times

3. **Data Protection**:
   - HTTPS for all communications
   - Workspace isolation for multi-tenant security
   - Two-factor authentication for enhanced account security

### **2.5.1 Authentication Token**

The system uses JWT (JSON Web Token) for authentication:

1. **Token Generation**: Login creates a signed JWT with:
   - User identifier
   - User roles and permissions
   - Expiration time (1 hour for access tokens)

2. **Token Usage**: Include in API requests as:
   `Authorization: Bearer [token]`

### **2.5.2 AI Parameters**

- **prompt**: Base instructions that guide the AI's behavior
- **max_tokens**: Controls response length (500-1000 for detailed answers)
- **temperature**: Randomness control (0-1); lower = more focused
- **top_p**: Response diversity; higher values consider more options
- **top_k**: Token selection restriction; affects vocabulary variety
- **model**: AI model selection (e.g., GPT-4.1-mini)

All these parameters are configurable directly through the application interface, allowing businesses to fine-tune their AI responses without technical knowledge.

---

## 3. Data model

### **3.1. Data model diagram:**

```
+-------------------+       +-------------------+       +-------------------+
| Workspace         |       | User              |       | UserWorkspace     |
+-------------------+       +-------------------+       +-------------------+
| id                |       | id                |       | id                |
| name              |       | email             |       | userId            |
| slug              |       | passwordHash      |       | workspaceId       |
| whatsappPhoneNum  |       | firstName         |       | role              |
| language          |       | lastName          |       | createdAt         |
| currency          |       | status            |       | updatedAt         |
| welcomeMessages   |       | createdAt         |       +-------------------+
| description       |       | updatedAt         |
| createdAt         |       +-------------------+
| updatedAt         |
+--------+----------+
         |
         |
         v
+-------------------+       +-------------------+       +-------------------+
| Products          |       | Categories        |       | Customers         |
+-------------------+       +-------------------+       +-------------------+
| id                |       | id                |       | id                |
| name              |       | name              |       | name              |
| description       |       | description       |       | email             |
| price             |       | workspaceId       |       | phone             |
| stock             |       | slug              |       | language          |
| sku               |       | isActive          |       | currency          |
| workspaceId       |       | createdAt         |       | activeChatbot     |
| categoryId        |       | updatedAt         |       | workspaceId       |
| slug              |       +-------------------+       | createdAt         |
| status            |                                   | updatedAt         |
| createdAt         |                                   +-------------------+
| updatedAt         |
+-------------------+

+-------------------+       +-------------------+       +-------------------+
| Orders            |       | OrderItems        |       | Prompts           |
+-------------------+       +-------------------+       +-------------------+
| id                |       | id                |       | id                |
| status            |       | quantity          |       | name              |
| total             |       | price             |       | workspaceId       |
| customerId        |       | orderId           |       | isRouter          |
| workspaceId       |       | productId         |       | createdAt         |
| createdAt         |       | createdAt         |       | temperature       |
| updatedAt         |       | updatedAt         |       | top_p             |
+-------------------+       +-------------------+       | top_k             |
                                                        | model             |
                                                        | max_tokens        |
                                                        | isActive          |
                                                        | createdAt         |
                                                        | updatedAt         |
                                                        +-------------------+
```

### **3.2. Description of main entities:**

- **User**: Admin users who manage workspaces
- **Workspace**: Business tenant with unique settings and configurations
- **UserWorkspace**: Junction entity connecting users to workspaces with permissions
- **Categories**: Product organization structure for logical grouping
- **Products**: Items available for sale with prices and inventory
- **Suppliers**: Product suppliers with contact information and addresses
- **Offers**: Time-limited discounts and promotions for products
- **Customers**: End users who interact through WhatsApp messaging
- **Orders**: Purchase records with payment status and customer information
- **OrderItems**: Individual items within an order with quantity and price
- **Agent Configuration**: AI agent settings with model parameters and behavior controls
- **ChatSession**: Conversation contexts between customers and the system
- **Message**: Individual messages within conversations with content and direction

---

## 4. API specification

Below are the most important endpoints of the ShopMe platform:

### 1. WhatsApp Messages API

**Endpoint**: `POST /api/messages/receive`

**Description**: Webhook endpoint that receives incoming WhatsApp messages from WhatsApp Business API and processes them using AI.

**Request Headers**:
- `Authorization`: Bearer token for authentication (required)
- `X-Workspace-Id`: Identifies which workspace should process the message (required)

**Request Body**:
```json
{
  "object": "whatsapp_business_account",
  "entry": [{
    "id": "WHATSAPP_BUSINESS_ID",
    "changes": [{
      "value": {
        "messages": [{
          "from": "PHONE_NUMBER",
          "id": "wamid.ID",
          "timestamp": "TIMESTAMP",
          "text": { "body": "Hola, puedo repitir el ultimo orden echo?" },
          "type": "text"
        }],
        "contacts": [{
          "profile": { "name": "Mario Rossi" },
          "wa_id": "PHONE_NUMBER"
        }]
      },
      "field": "messages"
    }]
  }]
}
```

**Status Codes**:
- `200 OK`: Message processed successfully
- `400 Bad Request`: Incorrect request format
- `401 Unauthorized`: Invalid credentials
- `403 Forbidden`: Access denied

### 2. Conversation History API

**Endpoint**: `GET /api/conversations/{customerId}/history`

**Description**: Gets conversation history with a customer.

**Query Parameters**:
- `workspaceId`: Workspace ID (required)
- `token`: Authentication token (required)

**Status Codes**:
- `200 OK`: History retrieved successfully
- `401 Unauthorized`: Invalid credentials
- `404 Not Found`: Customer not found

### 3. Agent Settings API

**Endpoint**: `POST /api/workspaces/{workspaceId}/agents`

**Description**: Creates or updates agent settings for AI customization.

**Query Parameters**:
- `token`: Authentication token (required)
  

**Status Codes**:
- `201 Created`: Agent created successfully
- `400 Bad Request`: Incorrect parameters
- `401 Unauthorized`: Invalid credentials

---

## 5. User stories

### **User Story 1: Create your first WhatsApp channel**

**As** a business owner,  
**I want** to create and configure my first WhatsApp business channel,  
**So that** I can start engaging with customers through automated AI conversations.

**Acceptance criteria:**

- **Given that** I am registered on the platform  
  **When** I access the channel creation section  
  **Then** I am able to start the WhatsApp channel configuration process

- **Given that** I am configuring a new channel  
  **When** I enter my WhatsApp Business number  
  **Then** the system verifies my ownership through an authentication process

- **Given that** I have a verified WhatsApp number  
  **When** I create welcome messages for new customers  
  **Then** they are saved in multiple languages as configured

- **Given that** my channel is configured  
  **When** I test the connection  
  **Then** I receive confirmation that the setup is successful

**Technical aspects:**
- WhatsApp Business API integration
- Secure phone number verification
- Configuration persistence in workspace settings
- Multi-language welcome message support

**Complexity**: Medium

### **User Story 2: Product Management**

**As** a business administrator,  
**I want** to manage my product catalog,  
**So that** I can showcase products to customers.

**Acceptance criteria:**

- **Given that** I am logged into the admin panel  
  **When** I navigate to the product section  
  **Then** I can see all my existing products and options to add new ones

- **Given that** I am in the product management section  
  **When** I create a new product with required information  
  **Then** the system saves it to my catalog

- **Given that** I am viewing my products  
  **When** I organize them into categories  
  **Then** the structure is maintained for future display to customers

- **Given that** I have products in my catalog  
  **When** I update inventory levels  
  **Then** these changes are immediately reflected

**Technical aspects:**
- Image handling and optimization
- Database queries optimization
- Inventory tracking logic

**Complexity**: Medium

### **User Story 3: AI Agent Configuration**

**As** a business manager,  
**I want** to configure AI behavior,  
**So that** automated responses match my business needs.

**Acceptance criteria:**

- **Given that** I am in the agent configuration section  
  **When** I adjust parameters like temperature and token limits  
  **Then** the system saves these preferences

- **Given that** I have different business departments  
  **When** I create specialized agents for each area  
  **Then** they handle different types of customer inquiries appropriately

- **Given that** I have configured an agent  
  **When** a customer initiates a conversation  
  **Then** the AI responds according to my configuration settings

- **Given that** I support multiple languages  
  **When** I set up agent configurations  
  **Then** each language variant is properly handled

**Technical aspects:**
- Language model integration
- Parameter validation and limits
- Configuration persistence

**Complexity**: High

---

## 6. Work tickets

### **Ticket 1: Authentication System**

**Title**: Implement JWT Authentication

**Description**:  
Create a secure authentication system with user and workspace management.

**Requirements**:
1. Implement JWT token-based authentication with refresh mechanism
2. Create secure user registration and login endpoints
3. Develop role-based access control
4. Set up workspace isolation for multi-tenancy
5. Implement WhatsApp connection and verification process

**Tasks**:
- Create User and UserWorkspace data models
- Develop JWT token generation and validation services
- Build authentication middleware for API protection
- Implement password hashing and verification
- Create endpoints for login, registration, token refresh
- Develop workspace creation and configuration flow
- Build WhatsApp verification process
- Write unit and integration tests for auth flows

**Acceptance criteria**:
- Users can register with valid email and password
- JWT tokens are issued with appropriate expiration
- Users can log in with valid credentials
- Refresh tokens extend sessions securely
- Workspaces are isolated with proper access controls
- Role permissions are correctly enforced
- WhatsApp connection process completes successfully

**Complexity**: Medium  
**Estimate**: 8 story points (approx. 5 days)  
**Priority**: Critical

### **Ticket 2: Product Management**

**Title**: Develop Product Management System

**Description**:  
Create product catalog management with categories and inventory.

**Requirements**:
1. Build complete CRUD operations for products
2. Implement category management with hierarchy
3. Create image upload and storage system
4. Develop inventory tracking functionality
5. Implement search and filtering capabilities

**Tasks**:
- Create Products and Categories data models
- Develop API endpoints for product CRUD operations
- Build image upload service with optimization
- Implement category management system
- Create inventory tracking mechanisms
- Build search functionality with filters
- Develop frontend components for product management
- Write tests for all product operations

**Acceptance criteria**:
- CRUD operations work for products and categories
- Images can be uploaded, stored, and retrieved
- Categories organize products in logical structure
- Inventory is accurately tracked with updates
- Search returns relevant products efficiently
- Data validation prevents invalid entries
- UI components render product information correctly

**Complexity**: Medium  
**Estimate**: 10 story points (approx. 7 days)  
**Priority**: High

### **Ticket 3: Agent Configuration**

**Title**: Implement AI Agent Configuration

**Description**:  
Build a system for configuring AI agents for customer interactions.

**Requirements**:
1. Create AI agent configuration data models
2. Implement parameter adjustment interface
3. Develop conversation context handling
4. Support multiple languages in configurations
5. Implement agent testing mechanisms

**Tasks**:
- Create Prompts data model with necessary fields
- Develop API endpoints for agent CRUD operations
- Build parameter validation service
- Implement multi-language support for agent responses
- Create agent type system (router, department-specific)
- Develop agent testing interface
- Build frontend components for configuration
- Write tests for agent configuration and behavior

**Acceptance criteria**:
- AI parameters can be saved and retrieved
- Interface allows adjustment of all key parameters
- Model selection works with available options
- Department-specific agents can be created
- Router configuration directs to appropriate agents
- Changes apply immediately to new conversations
- Multi-language support works correctly
- Error handling prevents invalid configurations

**Complexity**: High  
**Estimate**: 13 story points (approx. 8 days)  
**Priority**: High

---

## 7. Security

### 7.1 Authentication & Authorization

- **JWT Implementation**: Secure token-based authentication with short-lived access tokens (60 minutes) and HTTP-only cookie refresh tokens (7 days)
- **Password Security**: Bcrypt hashing with appropriate salt rounds (12+), password strength requirements enforced
- **Two-Factor Authentication**: Optional 2FA using Time-based One-Time Password (TOTP) for admin accounts
- **Role-Based Access Control**: Granular permissions based on user roles within workspaces
- **Session Management**: Proper invalidation of sessions, secure token storage, and cross-device session tracking

### 7.2 Data Protection

- **Transport Security**: HTTPS encryption for all communications with proper certificate management
- **Data Encryption**: Sensitive data encrypted at rest in the database
- **GDPR Compliance**: Consent management, data minimization, and right-to-erasure mechanisms
- **Data Backups**: Encrypted automated backups with retention policies
- **Audit Logging**: Comprehensive logging of security-relevant events with tamper protection

### 7.3 Application Security

- **Input Validation**: Server-side validation of all input with appropriate sanitization
- **API Security**: Rate limiting, request validation, and proper error handling that doesn't expose internals
- **CORS Configuration**: Restrictive Cross-Origin Resource Sharing policies to prevent unauthorized access
- **Content Security Policy**: Restrictive CSP headers to mitigate XSS attacks
- **Dependency Management**: Regular security audits of dependencies and prompt patching

### 7.4 WhatsApp Integration Security

- **Webhook Verification**: Signature verification for incoming WhatsApp webhook requests
- **Temporary Secure Links**: Time-limited secure links for sensitive operations
- **Message Validation**: Validation of incoming message structures before processing
- **Rate Limiting**: Protection against message flooding from single sources
- **Data Minimization**: Processing only necessary WhatsApp data and prompt deletion of sensitive information

---

## 8. CI/CD & Deployment

### 8.1 Development Workflow

```
  +-------------------+              +-------------------+
  |                   |    commit    |                   |
  |   Local Dev       +------------->+   GitHub          |
  |   Environment     |    push      |   Repository      |
  |                   |              |                   |
  +-------------------+              +--------+---------+
                                              |
                                              | trigger
                                              v
  +-------------------+              +--------+---------+
  |                   |    deploy    |                   |
  |   Production      +<-------------+   GitHub Actions  |
  |   Environment     |    release   |   CI/CD Pipeline  |
  |                   |              |                   |
  +-------------------+              +--------+----------+
                                              |
                                              | run
                                              v
                                     +--------+----------+
                                     |                   |
                                     |   Automated       |
                                     |   Tests           |
                                     |                   |
                                     +-------------------+
```

### 8.2 CI/CD Pipeline

Our continuous integration and continuous deployment pipeline consists of the following stages:

1. **Code Validation**
   - Linting (ESLint, Prettier)
   - Type checking (TypeScript)
   - Code quality analysis (SonarQube)

2. **Testing**
   - Unit tests (Jest)
   - Integration tests
   - End-to-end tests (when applicable)

3. **Build**
   - Frontend build (React)
   - Backend build (Node.js)
   - Docker image creation

4. **Security Scanning**
   - Dependency vulnerability scan
   - Docker image scan
   - Code security analysis

5. **Deployment**
   - Staging deployment (on PR approval)
   - Production deployment (on main branch merge)
   - Database migrations

### 8.3 Environments

- **Development**: Local developer environments with hot reload
- **Staging**: Pre-production environment for testing and verification
- **Production**: Live environment with high availability

### 8.4 Monitoring & Operations

- **Logging**: Centralized logging system with log retention
- **Metrics**: System and application metrics monitoring
- **Alerts**: Automated alerting for critical issues
- **Backups**: Automated database backups with testing
- **Disaster Recovery**: Documented recovery procedures with regular drills 