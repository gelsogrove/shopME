# Test Orders Dialogue MCP Script
# This script tests the orders dialogue flow to ensure proper link generation

import requests
import json
import time

# Configuration
BACKEND_URL = "http://localhost:3001"
N8N_URL = "http://localhost:5678"

def test_orders_dialogue():
    """Test the complete orders dialogue flow"""
    
    print("üß™ Testing Orders Dialogue Flow")
    print("=" * 50)
    
    # Step 1: Test internal API token generation
    print("\n1Ô∏è‚É£ Testing token generation...")
    
    token_response = requests.post(
        f"{BACKEND_URL}/api/internal/generate-token",
        json={
            "customerId": "test-customer-123",
            "action": "orders",
            "workspaceId": "test-workspace-456"
        },
        auth=("admin", "admin"),
        headers={"Content-Type": "application/json"}
    )
    
    if token_response.status_code == 200:
        token_data = token_response.json()
        print(f"‚úÖ Token generated successfully")
        print(f"   Token: {token_data.get('token', 'N/A')[:20]}...")
        print(f"   Link: {token_data.get('linkUrl', 'N/A')}")
        print(f"   Expires: {token_data.get('expiresAt', 'N/A')}")
        
        # Step 2: Test public orders API
        print("\n2Ô∏è‚É£ Testing public orders API...")
        
        orders_response = requests.get(
            f"{BACKEND_URL}/api/orders?token={token_data.get('token')}",
            headers={"Content-Type": "application/json"}
        )
        
        if orders_response.status_code == 200:
            orders_data = orders_response.json()
            print(f"‚úÖ Orders API working")
            print(f"   Customer: {orders_data.get('data', {}).get('customer', {}).get('name', 'N/A')}")
            print(f"   Orders count: {len(orders_data.get('data', {}).get('orders', []))}")
        else:
            print(f"‚ùå Orders API failed: {orders_response.status_code}")
            print(f"   Response: {orders_response.text}")
    
    else:
        print(f"‚ùå Token generation failed: {token_response.status_code}")
        print(f"   Response: {token_response.text}")
    
    # Step 3: Test N8N workflow
    print("\n3Ô∏è‚É£ Testing N8N workflow...")
    
    try:
        n8n_response = requests.post(
            f"{N8N_URL}/webhook/orders-dialogue",
            json={
                "message": "mi dai la lista degli ordini effettuati?",
                "customerId": "test-customer-123",
                "workspaceId": "test-workspace-456"
            },
            headers={"Content-Type": "application/json"}
        )
        
        if n8n_response.status_code == 200:
            n8n_data = n8n_response.json()
            print(f"‚úÖ N8N workflow executed")
            print(f"   Response: {n8n_data.get('response', 'N/A')}")
        else:
            print(f"‚ùå N8N workflow failed: {n8n_response.status_code}")
            print(f"   Response: {n8n_response.text}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå N8N not running or not accessible")
    
    print("\n" + "=" * 50)
    print("üèÅ Test completed")

def test_link_generation():
    """Test specific link generation scenarios"""
    
    print("\nüîó Testing Link Generation Scenarios")
    print("=" * 50)
    
    scenarios = [
        {
            "name": "Generic orders request",
            "message": "mi dai la lista degli ordini effettuati?",
            "expected_url": "https://app.example.com/orders?token="
        },
        {
            "name": "Specific order request", 
            "message": "voglio vedere l'ordine ORD-2025-001",
            "expected_url": "https://app.example.com/orders/ORD-2025-001?token="
        },
        {
            "name": "Invoice request",
            "message": "inviami la fattura dell'ordine ORD-2025-001", 
            "expected_url": "https://app.example.com/orders/ORD-2025-001?token="
        }
    ]
    
    for scenario in scenarios:
        print(f"\nüìã Testing: {scenario['name']}")
        print(f"   Message: {scenario['message']}")
        print(f"   Expected URL pattern: {scenario['expected_url']}")
        
        # Simulate the dialogue flow
        response = simulate_dialogue(scenario['message'])
        print(f"   Response: {response}")
        
        # Check if response contains proper URL
        if scenario['expected_url'] in response:
            print("   ‚úÖ URL pattern correct")
        else:
            print("   ‚ùå URL pattern incorrect")

def simulate_dialogue(message):
    """Simulate the dialogue flow"""
    
    # This would normally call the N8N workflow
    # For now, return a mock response
    
    if "lista degli ordini" in message.lower():
        return "Ecco il link per vedere tutti i tuoi ordini, potrai scaricare fatture e DDT da l√¨: https://app.example.com/orders?token=abc123 (valido 1 ora)"
    
    elif "ordine" in message.lower() and "ORD-" in message:
        return "Ecco il dettaglio dell'ordine ORD-2025-001. Da questa pagina puoi scaricare Fattura e DDT: https://app.example.com/orders/ORD-2025-001?token=abc123 (valido 1 ora)"
    
    else:
        return "Non ho capito la richiesta. Puoi specificare meglio?"

if __name__ == "__main__":
    print("üöÄ Starting Orders Dialogue Tests")
    print("=" * 50)
    
    # Test the complete flow
    test_orders_dialogue()
    
    # Test specific scenarios
    test_link_generation()
    
    print("\nüìù Summary:")
    print("- Check if tokens are generated correctly")
    print("- Verify URLs use workspace.url instead of localhost")
    print("- Ensure JWT tokens are properly formatted")
    print("- Test N8N workflow integration")
