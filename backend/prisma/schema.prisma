generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id                        String            @id @default(cuid())
  name                      String
  slug                      String            @unique
  whatsappPhoneNumber       String?
  whatsappApiKey            String?
  notificationEmail         String?
  webhookUrl                String?
  isActive                  Boolean           @default(true)
  language                  String            @default("ENG")
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
  isDelete                  Boolean           @default(false)
  currency                  String            @default("EUR")
  challengeStatus           Boolean           @default(false)
  description               String?
  messageLimit              Int               @default(50)
  blocklist                 String?           @default("")
  url                       String?
  businessType              BusinessType      @default(ECOMMERCE)
  welcomeMessages           Json?             @default("{\"en\": \"Welcome!\", \"es\": \"¡Bienvenido!\", \"it\": \"Benvenuto!\"}")
  wipMessages               Json?             @default("{\"en\": \"Work in progress. Please contact us later.\", \"es\": \"Trabajos en curso. Por favor, contáctenos más tarde.\", \"it\": \"Lavori in corso. Contattaci più tardi.\", \"pt\": \"Em manutenção. Por favor, contacte-nos mais tarde.\"}")
  afterRegistrationMessages Json?             @default("{\"de\": \"Danke für Ihre Registrierung, [nome]! Wie kann ich Ihnen heute helfen? Möchten Sie Ihre Bestellungen sehen? Die Angebote? Oder benötigen Sie andere Informationen?\", \"en\": \"Thank you for registering, [nome]! How can I help you today? Would you like to see your orders? The offers? Or do you need other information?\", \"es\": \"¡Gracias por registrarte, [nome]! ¿Cómo puedo ayudarte hoy? ¿Quieres ver tus pedidos? ¿Las ofertas? ¿O necesitas otra información?\", \"fr\": \"Merci de vous être inscrit, [nome] ! Comment puis-je vous aider aujourd'hui ? Voulez-vous voir vos commandes ? Les offres ? Ou avez-vous besoin d'autres informations ?\", \"it\": \"Grazie per esserti registrato, [nome]! Come ti posso aiutare oggi? Vuoi vedere i tuoi ordini? Le offerte? O hai bisogno di altre informazioni?\", \"pt\": \"Obrigado por se registrar, [nome]! Como posso ajudá-lo hoje? Quer ver seus pedidos? As ofertas? Ou precisa de outras informações?\"}")
  debugMode                 Boolean           @default(true)
  prompts                   Prompts[]
  users                     UserWorkspace[]
  agentConfigs              AgentConfig[]
  carts                     Carts[]
  categories                Categories[]
  chatSessions              ChatSession[]
  customers                 Customers[]
  documents                 Documents[]
  faqs                      FAQ[]
  gdprContent               GdprContent?
  languages                 Languages[]
  offers                    Offers[]
  orders                    Orders[]
  products                  Products[]
  secureTokens              SecureToken[]
  services                  Services[]
  usage                     Usage[]
  whatsappSettings          WhatsappSettings?
}

model Categories {
  id              String     @id @default(uuid())
  name            String
  description     String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  isActive        Boolean    @default(true)
  workspaceId     String
  slug            String
  workspace       Workspace  @relation(fields: [workspaceId], references: [id])
  offers          Offers[]   @relation("OfferCategory")
  products        Products[]
  offerCategories Offers[]   @relation("OfferCategories")

  @@unique([slug, workspaceId])
  @@map("categories")
}

model Languages {
  id          String    @id @default(uuid())
  name        String
  code        String
  isDefault   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@map("languages")
}

model Products {
  id          String          @id @default(uuid())
  name        String
  ProductCode String?
  description String?
  price       Float
  stock       Int             @default(0)
  sku         String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  isActive    Boolean         @default(true)
  workspaceId String
  categoryId  String?
  slug        String          @unique
  status      ProductStatus   @default(ACTIVE)
  cartItems   CartItems[]
  orderItems  OrderItems[]
  chunks      ProductChunks[]
  category    Categories?     @relation(fields: [categoryId], references: [id])
  workspace   Workspace       @relation(fields: [workspaceId], references: [id])

  @@map("products")
}

model Customers {
  id                            String        @id @default(uuid())
  name                          String
  email                         String
  phone                         String?
  address                       String?
  company                       String?
  discount                      Float?        @default(0)
  language                      String?       @default("ENG")
  currency                      String?       @default("EUR")
  notes                         String?
  serviceIds                    String[]      @default([])
  isBlacklisted                 Boolean       @default(false)
  createdAt                     DateTime      @default(now())
  updatedAt                     DateTime      @updatedAt
  isActive                      Boolean       @default(true)
  workspaceId                   String
  last_privacy_version_accepted String?
  privacy_accepted_at           DateTime?
  push_notifications_consent    Boolean       @default(false)
  push_notifications_consent_at DateTime?
  activeChatbot                 Boolean       @default(true)
  invoiceAddress                Json?
  cart                          Carts?
  chatSessions                  ChatSession[]
  workspace                     Workspace     @relation(fields: [workspaceId], references: [id])
  orders                        Orders[]
  usage                         Usage[]

  @@map("customers")
}

model Orders {
  id              String          @id @default(uuid())
  orderCode       String          @unique
  status          OrderStatus     @default(PENDING)
  paymentMethod   PaymentMethod?
  totalAmount     Float
  shippingAmount  Float?          @default(0)
  taxAmount       Float?          @default(0)
  shippingAddress Json?
  billingAddress  Json?
  notes           String?
  discountCode    String?
  discountAmount  Float?          @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  customerId      String
  workspaceId     String
  trackingNumber  String?
  items           OrderItems[]
  customer        Customers       @relation(fields: [customerId], references: [id])
  workspace       Workspace       @relation(fields: [workspaceId], references: [id])
  paymentDetails  PaymentDetails?

  @@map("orders")
}

model OrderItems {
  id             String    @id @default(uuid())
  itemType       ItemType  @default(PRODUCT)
  quantity       Int       @default(1)
  unitPrice      Float
  totalPrice     Float
  productVariant Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  orderId        String
  productId      String?
  serviceId      String?
  order          Orders    @relation(fields: [orderId], references: [id])
  product        Products? @relation(fields: [productId], references: [id])
  service        Services? @relation(fields: [serviceId], references: [id])

  @@map("order_items")
}

model Carts {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  customerId  String      @unique
  workspaceId String
  items       CartItems[]
  customer    Customers   @relation(fields: [customerId], references: [id])
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])

  @@map("carts")
}

model CartItems {
  id        String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cartId    String
  productId String
  cart      Carts    @relation(fields: [cartId], references: [id])
  product   Products @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Prompts {
  id          String    @id @default(uuid())
  name        String
  content     String
  workspaceId String
  isRouter    Boolean   @default(false)
  department  String?
  temperature Float?    @default(0.7)
  top_p       Float?    @default(0.9)
  top_k       Int?      @default(40)
  model       String?   @default("GPT-4.1-mini")
  max_tokens  Int?      @default(1000)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Message[]

  @@index([workspaceId])
}

model User {
  id              String          @id @default(uuid())
  email           String          @unique
  passwordHash    String
  firstName       String?
  lastName        String?
  status          UserStatus      @default(ACTIVE)
  lastLogin       DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  role            UserRole        @default(MEMBER)
  twoFactorSecret String?
  gdprAccepted    DateTime?
  phoneNumber     String?
  workspaces      UserWorkspace[]
  otpTokens       OtpToken[]
  passwordResets  PasswordReset[]

  @@map("users")
}

model UserWorkspace {
  userId      String
  workspaceId String
  role        String
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@id([userId, workspaceId])
}

model WhatsappSettings {
  id          String    @id @default(uuid())
  phoneNumber String    @unique
  apiKey      String
  webhookUrl  String?
  settings    Json?     @default("{}")
  adminEmail  String?
  smtpHost    String?   @default("smtp.ethereal.email")
  smtpPort    Int?      @default(587)
  smtpSecure  Boolean?  @default(false)
  smtpUser    String?
  smtpPass    String?
  smtpFrom    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String    @unique
  gdpr        String?
  n8nWebhook  String?   @default("http://localhost:5678/webhook/webhook-start")
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@map("whatsapp_settings")
}

model PaymentDetails {
  id               String   @id @default(uuid())
  provider         String
  status           String   @default("PENDING")
  amount           Float
  currency         String   @default("EUR")
  providerResponse Json?    @default("{}")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  orderId          String   @unique
  order            Orders   @relation(fields: [orderId], references: [id])

  @@map("payment_details")
}

model ChatSession {
  id          String    @id @default(uuid())
  status      String    @default("active")
  context     Json?     @default("{}")
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  customerId  String
  customer    Customers @relation(fields: [customerId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Message[]

  @@map("chat_sessions")
}

model Message {
  id                 String           @id @default(uuid())
  direction          MessageDirection
  content            String
  type               MessageType      @default(TEXT)
  status             String           @default("sent")
  aiGenerated        Boolean          @default(false)
  metadata           Json?            @default("{}")
  read               Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  chatSessionId      String
  promptId           String?
  functionCallsDebug String?
  processingSource   String?
  translatedQuery    String?
  processedPrompt    String?
  debugInfo          String? // 🔧 NEW: Debug information as JSON string
  chatSession        ChatSession      @relation(fields: [chatSessionId], references: [id])
  prompt             Prompts?         @relation(fields: [promptId], references: [id])

  @@map("messages")
}

model PasswordReset {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])

  @@map("password_resets")
}

model OtpToken {
  id        String    @id @default(uuid())
  userId    String
  otpHash   String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])

  @@map("otp_tokens")
}

model RegistrationToken {
  id          String    @id @default(uuid())
  token       String    @unique
  phoneNumber String
  workspaceId String
  expiresAt   DateTime
  usedAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("registration_tokens")
}

model SecureToken {
  id          String    @id @default(uuid())
  token       String    @unique
  type        String
  workspaceId String
  userId      String?
  phoneNumber String?
  payload     Json?
  expiresAt   DateTime
  usedAt      DateTime?
  ipAddress   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  customerId  String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([customerId, type, workspaceId], name: "unique_customer_token", map: "unique_customer_token_non_null")
  @@index([token])
  @@index([expiresAt])
  @@index([workspaceId])
  @@index([customerId])
  @@map("secure_tokens")
}

model Language {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Services {
  id          String          @id @default(cuid())
  code        String          @unique
  name        String
  description String
  price       Float
  currency    String          @default("EUR")
  isActive    Boolean         @default(true)
  workspaceId String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  duration    Int             @default(60)
  orderItems  OrderItems[]
  chunks      ServiceChunks[]
  workspace   Workspace       @relation(fields: [workspaceId], references: [id])

  @@map("services")
}

model FAQ {
  id          String      @id @default(cuid())
  question    String
  answer      String
  isActive    Boolean     @default(true)
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  chunks      FAQChunks[]
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])

  @@map("faqs")
}

model Offers {
  id              String       @id @default(cuid())
  name            String
  description     String?
  discountPercent Float
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean      @default(true)
  categoryId      String?
  workspaceId     String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  category        Categories?  @relation("OfferCategory", fields: [categoryId], references: [id])
  workspace       Workspace    @relation(fields: [workspaceId], references: [id])
  categories      Categories[] @relation("OfferCategories")

  @@map("offers")
}

model Documents {
  id           String           @id @default(uuid())
  filename     String
  originalName String
  filePath     String
  fileSize     Int
  mimeType     String
  status       DocumentStatus   @default(UPLOADED)
  workspaceId  String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  isActive     Boolean          @default(true)
  chunks       DocumentChunks[]
  workspace    Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([status])
  @@index([isActive])
  @@map("documents")
}

model DocumentChunks {
  id         String    @id @default(uuid())
  documentId String
  content    String
  chunkIndex Int
  embedding  Json?
  createdAt  DateTime  @default(now())
  document   Documents @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([chunkIndex])
  @@map("document_chunks")
}

model FAQChunks {
  id         String   @id @default(uuid())
  faqId      String
  content    String
  chunkIndex Int
  embedding  Json?
  createdAt  DateTime @default(now())
  faq        FAQ      @relation(fields: [faqId], references: [id], onDelete: Cascade)

  @@index([faqId])
  @@index([chunkIndex])
  @@map("faq_chunks")
}

model ServiceChunks {
  id         String   @id @default(uuid())
  serviceId  String
  content    String
  chunkIndex Int
  embedding  Json?
  createdAt  DateTime @default(now())
  service    Services @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId])
  @@index([chunkIndex])
  @@map("service_chunks")
}

model ProductChunks {
  id          String   @id @default(uuid())
  productId   String
  content     String
  chunkIndex  Int
  embedding   Json?
  workspaceId String
  language    String   @default("en")
  createdAt   DateTime @default(now())
  product     Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([chunkIndex])
  @@index([workspaceId])
  @@index([language])
  @@map("product_chunks")
}

model AgentConfig {
  id          String    @id @default(uuid())
  workspaceId String
  prompt      String    @default("You are a helpful assistant.")
  model       String    @default("openai/gpt-4o-mini")
  temperature Float     @default(0.7)
  maxTokens   Int       @default(1000)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@map("agent_configs")
}

model GdprContent {
  id          String    @id @default(uuid())
  workspaceId String    @unique
  content     String
  version     String    @default("1.0")
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@map("gdpr_content")
}

model Usage {
  id          String    @id @default(uuid())
  workspaceId String
  clientId    String
  price       Float     @default(0.005)
  createdAt   DateTime  @default(now())
  customer    Customers @relation(fields: [clientId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
  @@index([clientId])
  @@index([createdAt])
  @@map("usage")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum WorkspaceStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
  OUT_OF_STOCK
}

enum DocumentStatus {
  UPLOADED
  PROCESSING
  PROCESSED
  ERROR
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  PAYPAL
  CASH_ON_DELIVERY
  CRYPTO
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

enum MessageType {
  TEXT
  IMAGE
  DOCUMENT
  LOCATION
  CONTACT
}

enum ChannelType {
  WHATSAPP
  TELEGRAM
  MESSENGER
  LINE
}

enum UserRole {
  ADMIN
  OWNER
  MEMBER
}

enum BusinessType {
  ECOMMERCE
  RESTAURANT
  CLINIC
  RETAIL
  SERVICES
  GENERIC
}

enum ItemType {
  PRODUCT
  SERVICE
}
