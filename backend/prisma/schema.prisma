generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id                  String            @id @default(cuid())
  name                String
  slug                String            @unique
  whatsappPhoneNumber String?
  whatsappApiKey      String?
  notificationEmail   String?
  webhookUrl          String?
  isActive            Boolean           @default(true)
  language            String            @default("ENG")
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  isDelete            Boolean           @default(false)
  currency            String            @default("EUR")
  challengeStatus     Boolean           @default(false)
  wipMessages         Json?             @default("{\"it\": \"Lavori in corso. Contattaci più tardi.\", \"en\": \"Work in progress. Please contact us later.\", \"es\": \"Trabajos en curso. Por favor, contáctenos más tarde.\", \"pt\": \"Em manutenção. Por favor, contacte-nos mais tarde.\"}")
  description         String?
  messageLimit        Int               @default(50)
  blocklist           String?           @default("")
  url                 String?
  welcomeMessages     Json?             @default("{\"it\": \"Benvenuto!\", \"en\": \"Welcome!\", \"es\": \"¡Bienvenido!\"}")
  afterRegistrationMessages Json?       @default("{\"it\": \"Registrazione eseguita con successo. Ciao [nome], in cosa posso esserti utile oggi?\", \"en\": \"Registration completed successfully. Hello [nome], how can I help you today?\", \"es\": \"Registro completado con éxito. Hola [nome], ¿en qué puedo ayudarte hoy?\", \"fr\": \"Enregistrement effectué avec succès. Bonjour [nome], en quoi puis-je vous aider aujourd'hui ?\", \"de\": \"Registrierung erfolgreich abgeschlossen. Hallo [nome], wie kann ich Ihnen heute helfen?\", \"pt\": \"Registro concluído com sucesso. Olá [nome], em que posso ajudá-lo hoje?\"}")
  carts               Carts[]
  categories          Categories[]
  chatSessions        ChatSession[]
  customers           Customers[]
  events              Events[]
  faqs                FAQ[]
  languages           Languages[]
  orders              Orders[]
  products            Products[]
  prompts             Prompts[]
  services            Services[]
  users               UserWorkspace[]
  whatsappSettings    WhatsappSettings?
  offers              Offers[]
  suppliers           Suppliers[]
}

model Categories {
  id          String     @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isActive    Boolean    @default(true)
  workspaceId String
  slug        String
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
  products    Products[]
  offers      Offers[]

  @@unique([slug, workspaceId])
  @@map("categories")
}

model Languages {
  id          String    @id @default(uuid())
  name        String    // e.g. 'Italiano', 'Español', 'English', 'Português'
  code        String    // 'IT', 'ESP', 'ENG', 'PRT'
  isDefault   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@map("languages")
}

model Products {
  id          String        @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int           @default(0)
  sku         String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isActive    Boolean       @default(true)
  workspaceId String
  categoryId  String?
  supplierId  String?
  slug        String        @unique
  status      ProductStatus @default(ACTIVE)
  image       String?
  cartItems   CartItems[]
  orderItems  OrderItems[]
  category    Categories?   @relation(fields: [categoryId], references: [id])
  supplier    Suppliers?    @relation(fields: [supplierId], references: [id])
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])

  @@map("products")
}

model Customers {
  id                         String        @id @default(uuid())
  name                       String
  email                      String
  phone                      String?
  address                    String?
  company                    String?
  discount                   Float?        @default(0)
  language                   String?       @default("ENG")
  currency                   String?       @default("EUR")
  notes                      String?
  serviceIds                 String[]      @default([])
  isBlacklisted              Boolean       @default(false)
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt
  isActive                   Boolean       @default(true)
  workspaceId                String
  last_privacy_version_accepted String?
  privacy_accepted_at        DateTime?
  push_notifications_consent Boolean       @default(false)
  push_notifications_consent_at DateTime?
  cart                       Carts?
  chatSessions               ChatSession[]
  workspace                  Workspace     @relation(fields: [workspaceId], references: [id])
  orders                     Orders[]
  activeChatbot              Boolean       @default(true)

  @@map("customers")
}

model Orders {
  id             String          @id @default(uuid())
  status         String
  total          Float
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  customerId     String
  workspaceId    String
  items          OrderItems[]
  customer       Customers       @relation(fields: [customerId], references: [id])
  workspace      Workspace       @relation(fields: [workspaceId], references: [id])
  paymentDetails PaymentDetails?

  @@map("orders")
}

model OrderItems {
  id        String   @id @default(uuid())
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   String
  productId String
  order     Orders   @relation(fields: [orderId], references: [id])
  product   Products @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Carts {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  customerId  String      @unique
  workspaceId String
  items       CartItems[]
  customer    Customers   @relation(fields: [customerId], references: [id])
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])

  @@map("carts")
}

model CartItems {
  id        String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cartId    String
  productId String
  cart      Carts    @relation(fields: [cartId], references: [id])
  product   Products @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Prompts {
  id            String    @id @default(uuid())
  name          String
  content       String    @db.Text
  workspaceId   String
  isRouter      Boolean   @default(false)
  department    String?
  temperature   Float?    @default(0.7)
  top_p         Float?    @default(0.9)
  top_k         Int?      @default(40)
  model         String?   @default("GPT-4.1-mini")
  max_tokens    Int?      @default(1000)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages      Message[]

  @@index([workspaceId])
}

model User {
  id              String          @id @default(uuid())
  email           String          @unique
  passwordHash    String
  firstName       String?
  lastName        String?
  status          UserStatus      @default(ACTIVE)
  lastLogin       DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  role            UserRole        @default(MEMBER)
  twoFactorSecret String?
  gdprAccepted    DateTime?
  phoneNumber     String?
  otpTokens       OtpToken[]
  passwordResets  PasswordReset[]
  workspaces      UserWorkspace[]

  @@map("users")
}

model UserWorkspace {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  workspaceId String
  role        UserRole  @default(MEMBER)
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
  @@map("user_workspaces")
}

model WhatsappSettings {
  id          String    @id @default(uuid())
  phoneNumber String    @unique
  apiKey      String
  webhookUrl  String?
  settings    Json?     @default("{}")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String    @unique
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  gdpr        String?   @db.Text

  @@map("whatsapp_settings")
}

model PaymentDetails {
  id               String        @id @default(uuid())
  provider         String
  status           PaymentStatus @default(PENDING)
  amount           Float
  currency         String        @default("EUR")
  providerResponse Json?         @default("{}")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  orderId          String        @unique
  order            Orders        @relation(fields: [orderId], references: [id])

  @@map("payment_details")
}

model ChatSession {
  id          String    @id @default(uuid())
  status      String    @default("active")
  context     Json?     @default("{}")
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  customerId  String
  customer    Customers @relation(fields: [customerId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Message[]

  @@map("chat_sessions")
}

model Message {
  id            String           @id @default(uuid())
  direction     MessageDirection
  content       String
  type          MessageType      @default(TEXT)
  status        String           @default("sent")
  aiGenerated   Boolean          @default(false)
  metadata      Json?            @default("{}")
  read          Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  chatSessionId String
  promptId      String?
  chatSession   ChatSession      @relation(fields: [chatSessionId], references: [id])
  prompt        Prompts?         @relation(fields: [promptId], references: [id])

  @@map("messages")
}

model PasswordReset {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])

  @@map("password_resets")
}

model OtpToken {
  id        String    @id @default(uuid())
  userId    String
  otpHash   String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])

  @@map("otp_tokens")
}

model RegistrationToken {
  id            String    @id @default(uuid())
  token         String    @unique
  phoneNumber   String
  workspaceId   String
  expiresAt     DateTime
  usedAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("registration_tokens")
}

model Language {
  id        String   @id @default(cuid())
  code      String   @unique // 'IT', 'ESP', 'ENG', 'PRT'
  name      String   // 'Italiano', 'Español', 'English', 'Português'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Services {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  currency    String    @default("EUR")
  isActive    Boolean   @default(true)
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@map("services")
}

model Events {
  id          String    @id @default(cuid())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  location    String
  price       Float
  currency    String    @default("EUR")
  isActive    Boolean   @default(true)
  maxAttendees Int?
  currentAttendees Int? @default(0)
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@map("events")
}

model FAQ {
  id          String    @id @default(cuid())
  question    String
  answer      String    @db.Text
  isActive    Boolean   @default(true)
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@map("faqs")
}

model Offers {
  id              String      @id @default(cuid())
  name            String
  description     String?
  discountPercent Float
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean     @default(true)
  categoryId      String?
  workspaceId     String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  category        Categories? @relation(fields: [categoryId], references: [id])
  workspace       Workspace   @relation(fields: [workspaceId], references: [id])

  @@map("offers")
}

model Suppliers {
  id          String    @id @default(uuid())
  name        String
  description String?
  address     String?
  website     String?
  phone       String?
  email       String?
  contactPerson String?
  notes       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  slug        String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  products    Products[]

  @@unique([slug, workspaceId])
  @@map("suppliers")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum WorkspaceStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  COMPLETED
  FAILED
  REFUNDED
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

enum MessageType {
  TEXT
  IMAGE
  DOCUMENT
  LOCATION
  CONTACT
}

enum ChannelType {
  WHATSAPP
  TELEGRAM
  MESSENGER
  LINE
}

enum UserRole {
  ADMIN
  OWNER
  MEMBER
}
