generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id                  String            @id @default(cuid())
  name                String
  slug                String            @unique
  whatsappPhoneNumber String?
  whatsappApiKey      String?
  notificationEmail   String?
  webhookUrl          String?
  isActive            Boolean           @default(true)
  language            String            @default("en")
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  isDelete            Boolean           @default(false)
  carts               Carts[]
  categories          Categories[]
  chatSessions        ChatSession[]
  customers           Customers[]
  languages           Languages[]
  orders              Orders[]
  products            Products[]
  prompts             Prompts[]
  settings            Settings?
  users               UserWorkspace[]
  whatsappSettings    WhatsappSettings?
}

model Categories {
  id          String     @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isActive    Boolean    @default(true)
  workspaceId String
  slug        String     @unique
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
  products    Products[]

  @@map("categories")
}

model Languages {
  id          String    @id @default(uuid())
  name        String
  code        String
  isDefault   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@map("languages")
}

model Products {
  id          String        @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int           @default(0)
  sku         String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isActive    Boolean       @default(true)
  workspaceId String
  categoryId  String?
  slug        String        @unique
  status      ProductStatus @default(ACTIVE)
  cartItems   CartItems[]
  orderItems  OrderItems[]
  category    Categories?   @relation(fields: [categoryId], references: [id])
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])

  @@map("products")
}

model Customers {
  id           String        @id @default(uuid())
  name         String
  email        String
  phone        String?
  address      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isActive     Boolean       @default(true)
  workspaceId  String
  cart         Carts?
  chatSessions ChatSession[]
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  orders       Orders[]

  @@map("customers")
}

model Orders {
  id             String          @id @default(uuid())
  status         String
  total          Float
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  customerId     String
  workspaceId    String
  items          OrderItems[]
  customer       Customers       @relation(fields: [customerId], references: [id])
  workspace      Workspace       @relation(fields: [workspaceId], references: [id])
  paymentDetails PaymentDetails?

  @@map("orders")
}

model OrderItems {
  id        String   @id @default(uuid())
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   String
  productId String
  order     Orders   @relation(fields: [orderId], references: [id])
  product   Products @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Carts {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  customerId  String      @unique
  workspaceId String
  items       CartItems[]
  customer    Customers   @relation(fields: [customerId], references: [id])
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])

  @@map("carts")
}

model CartItems {
  id        String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cartId    String
  productId String
  cart      Carts    @relation(fields: [cartId], references: [id])
  product   Products @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Settings {
  id          String    @id @default(uuid())
  theme       String    @default("light")
  language    String    @default("en")
  currency    String    @default("USD")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String    @unique
  timezone    String    @default("UTC")
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@map("settings")
}

model Prompts {
  id          String    @id @default(uuid())
  name        String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  workspaceId String
  messages    Message[]
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@map("prompts")
}

model User {
  id              String          @id @default(uuid())
  email           String          @unique
  passwordHash    String
  firstName       String?
  lastName        String?
  status          UserStatus      @default(ACTIVE)
  lastLogin       DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  role            UserRole        @default(MEMBER)
  twoFactorSecret String?
  gdprAccepted    DateTime?
  otpTokens       OtpToken[]
  passwordResets  PasswordReset[]
  workspaces      UserWorkspace[]

  @@map("users")
}

model UserWorkspace {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  workspaceId String
  role        UserRole  @default(MEMBER)
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
  @@map("user_workspaces")
}

model WhatsappSettings {
  id          String    @id @default(uuid())
  phoneNumber String    @unique
  apiKey      String
  webhookUrl  String?
  settings    Json?     @default("{}")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String    @unique
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@map("whatsapp_settings")
}

model PaymentDetails {
  id               String        @id @default(uuid())
  provider         String
  status           PaymentStatus @default(PENDING)
  amount           Float
  currency         String        @default("USD")
  providerResponse Json?         @default("{}")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  orderId          String        @unique
  order            Orders        @relation(fields: [orderId], references: [id])

  @@map("payment_details")
}

model ChatSession {
  id          String    @id @default(uuid())
  status      String    @default("active")
  context     Json?     @default("{}")
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  customerId  String
  customer    Customers @relation(fields: [customerId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Message[]

  @@map("chat_sessions")
}

model Message {
  id            String           @id @default(uuid())
  direction     MessageDirection
  content       String
  type          MessageType      @default(TEXT)
  status        String           @default("sent")
  aiGenerated   Boolean          @default(false)
  metadata      Json?            @default("{}")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  chatSessionId String
  promptId      String?
  chatSession   ChatSession      @relation(fields: [chatSessionId], references: [id])
  prompt        Prompts?         @relation(fields: [promptId], references: [id])

  @@map("messages")
}

model PasswordReset {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])

  @@map("password_resets")
}

model OtpToken {
  id        String    @id @default(uuid())
  userId    String
  otpHash   String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])

  @@map("otp_tokens")
}

model Language {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum WorkspaceStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  COMPLETED
  FAILED
  REFUNDED
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

enum MessageType {
  TEXT
  IMAGE
  DOCUMENT
  LOCATION
  CONTACT
}

enum ChannelType {
  WHATSAPP
  TELEGRAM
  MESSENGER
  LINE
}

enum UserRole {
  ADMIN
  OWNER
  MEMBER
}
