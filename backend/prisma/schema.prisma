// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum WorkspaceStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  COMPLETED
  FAILED
  REFUNDED
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

enum MessageType {
  TEXT
  IMAGE
  DOCUMENT
  LOCATION
  CONTACT
}

enum ChannelType {
  WHATSAPP
  TELEGRAM
  MESSENGER
  LINE
}

model Workspace {
  id                  String    @id @default(uuid())
  name                String    @db.VarChar(100)
  description         String?
  whatsappPhoneNumber String?
  whatsappApiToken    String?
  whatsappWebhookUrl  String?
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  categories Categories[]
  languages  Languages[]
  products   Products[]
  customers  Customers[]
  orders     Orders[]
  carts      Carts[]
  settings   Settings?
  prompts    Prompts[]
  users      UserWorkspace[]
  whatsappSettings WhatsappSettings?
  activityLogs ActivityLog[]
  chatSessions ChatSession[]

  @@map("workspaces")
}

model Categories {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)

  // Relations
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  products    Products[]

  @@map("categories")
}

model Languages {
  id          String    @id @default(uuid())
  name        String
  code        String
  isDefault   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)

  // Relations
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@map("languages")
}

model Products {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int       @default(0)
  sku         String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)

  // Relations
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  categoryId   String?
  category     Categories? @relation(fields: [categoryId], references: [id])
  orderItems   OrderItems[]
  cartItems    CartItems[]

  @@map("products")
}

model Customers {
  id              String    @id @default(uuid())
  name            String
  email           String
  phone           String?
  address         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isActive        Boolean   @default(true)

  // Relations
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id])
  orders          Orders[]
  cart            Carts?
  chatSessions    ChatSession[]

  @@map("customers")
}

model Orders {
  id          String    @id @default(uuid())
  status      String
  total       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  customerId  String
  customer    Customers    @relation(fields: [customerId], references: [id])
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  items       OrderItems[]
  paymentDetails PaymentDetails?

  @@map("orders")
}

model OrderItems {
  id        String    @id @default(uuid())
  quantity  Int
  price     Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  orderId   String
  order     Orders    @relation(fields: [orderId], references: [id])
  productId String
  product   Products  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Carts {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  customerId  String    @unique
  customer    Customers @relation(fields: [customerId], references: [id])
  workspaceId String
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
  items       CartItems[]

  @@map("carts")
}

model CartItems {
  id        String    @id @default(uuid())
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  cartId    String
  cart      Carts     @relation(fields: [cartId], references: [id])
  productId String
  product   Products  @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Settings {
  id          String    @id @default(uuid())
  theme       String    @default("light")
  language    String    @default("en")
  currency    String    @default("USD")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  workspaceId String    @unique
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@map("settings")
}

model Prompts {
  id          String    @id @default(uuid())
  name        String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)

  // Relations
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Message[]

  @@map("prompts")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String
  firstName     String?
  lastName      String?
  status        UserStatus @default(ACTIVE)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  workspaces    UserWorkspace[]
  activityLogs  ActivityLog[]

  @@map("users")
}

model UserWorkspace {
  id          String    @id @default(uuid())
  role        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
  @@map("user_workspaces")
}

model WhatsappSettings {
  id              String    @id @default(uuid())
  phoneNumber     String    @unique
  apiKey         String
  webhookUrl     String?
  settings       Json?      @default("{}")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  workspaceId    String    @unique
  workspace      Workspace @relation(fields: [workspaceId], references: [id])

  @@map("whatsapp_settings")
}

model PaymentDetails {
  id                String        @id @default(uuid())
  provider          String
  status            PaymentStatus @default(PENDING)
  amount            Float
  currency          String        @default("USD")
  providerResponse  Json?         @default("{}")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  orderId          String        @unique
  order            Orders        @relation(fields: [orderId], references: [id])

  @@map("payment_details")
}

model ActivityLog {
  id            String    @id @default(uuid())
  action        String
  entityType    String
  entityId      String?
  metadata      Json?     @default("{}")
  ipAddress     String?
  createdAt     DateTime  @default(now())

  // Relations
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  userId        String
  user          User      @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

model ChatSession {
  id          String    @id @default(uuid())
  status      String    @default("active")
  context     Json?     @default("{}")
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  customerId  String
  customer    Customers @relation(fields: [customerId], references: [id])
  messages    Message[]

  @@map("chat_sessions")
}

model Message {
  id            String          @id @default(uuid())
  direction     MessageDirection
  content       String
  type          MessageType     @default(TEXT)
  status        String          @default("sent")
  aiGenerated   Boolean         @default(false)
  metadata      Json?           @default("{}")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  chatSessionId String
  chatSession   ChatSession     @relation(fields: [chatSessionId], references: [id])
  promptId      String?
  prompt        Prompts?        @relation(fields: [promptId], references: [id])

  @@map("messages")
}
