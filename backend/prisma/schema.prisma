// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspaces {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  
  // WhatsApp configuration
  whatsappPhoneNumber String?
  whatsappApiToken    String?
  whatsappWebhookUrl  String?
  
  // Relations
  products   Products[]
  customers  Customers[]
  orders     Orders[]
  carts      Carts[]
  settings   Settings?
  prompts    Prompts[]
  categories Categories[]
  languages  Languages[]
}

model Categories {
  id          String    @id @default(uuid())
  name        String
  description String?
  slug        String    @unique
  imageUrl    String?
  isActive    Boolean   @default(true)
  
  // Relations
  workspaceId String
  workspace   Workspaces @relation(fields: [workspaceId], references: [id])
  products    Products[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
}

model Languages {
  id          String    @id @default(uuid())
  code        String    // e.g., 'en', 'it'
  name        String    // e.g., 'English', 'Italiano'
  isDefault   Boolean   @default(false)
  isActive    Boolean   @default(true)
  
  // Relations
  workspaceId String
  workspace   Workspaces @relation(fields: [workspaceId], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, code])
  @@index([workspaceId])
}

model Products {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Decimal
  imageUrl    String?
  
  // Italian product certifications
  certification String? // DOP, IGP, DOCG
  region        String?
  producer      String?
  origin        String?
  
  // Stock management
  stock         Int     @default(0)
  
  // Relations
  workspaceId  String
  workspace    Workspaces @relation(fields: [workspaceId], references: [id])
  categoryId   String?
  category     Categories? @relation(fields: [categoryId], references: [id])
  cartItems    CartItems[]
  orderItems   OrderItems[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([workspaceId])
  @@index([categoryId])
}

model Customers {
  id              String   @id @default(uuid())
  whatsappNumber  String
  name            String?
  email           String?
  
  // Relations
  workspaceId     String
  workspace       Workspaces @relation(fields: [workspaceId], references: [id])
  orders          Orders[]
  cart            Carts?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([workspaceId, whatsappNumber])
  @@index([workspaceId])
}

model Orders {
  id          String      @id @default(uuid())
  status      OrderStatus @default(PENDING)
  total       Decimal
  
  // Relations
  customerId  String
  customer    Customers    @relation(fields: [customerId], references: [id])
  workspaceId String
  workspace   Workspaces   @relation(fields: [workspaceId], references: [id])
  items       OrderItems[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([customerId])
  @@index([workspaceId])
}

model OrderItems {
  id        String   @id @default(uuid())
  quantity  Int
  price     Decimal
  
  // Relations
  orderId   String
  order     Orders    @relation(fields: [orderId], references: [id])
  productId String
  product   Products  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Carts {
  id          String     @id @default(uuid())
  
  // Relations
  customerId  String     @unique
  customer    Customers   @relation(fields: [customerId], references: [id])
  workspaceId String
  workspace   Workspaces  @relation(fields: [workspaceId], references: [id])
  items       CartItems[]
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([workspaceId])
}

model CartItems {
  id        String   @id @default(uuid())
  quantity  Int
  
  // Relations
  cartId    String
  cart      Carts     @relation(fields: [cartId], references: [id])
  productId String
  product   Products  @relation(fields: [productId], references: [id])

  @@index([cartId])
  @@index([productId])
}

model Settings {
  id          String    @id @default(uuid())
  language    String    @default("en")
  timezone    String    @default("UTC")
  currency    String    @default("EUR")
  
  // Relations
  workspaceId String    @unique
  workspace   Workspaces @relation(fields: [workspaceId], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Prompts {
  id          String    @id @default(uuid())
  name        String
  content     String
  category    String    // welcome, product_info, order_status, etc.
  
  // AI parameters
  topP        Float     @default(0.9)  // Controls diversity of responses
  topK        Int       @default(50)   // Limits vocabulary size for responses
  temperature Float     @default(0.7)  // Controls randomness
  
  // Relations
  workspaceId String
  workspace   Workspaces @relation(fields: [workspaceId], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
