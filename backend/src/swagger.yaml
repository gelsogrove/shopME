openapi: 3.0.0
info:
  title: ShopMe
  version: 1.0.0
  description: API for managing Italian products shop

servers:
  - url: http://localhost:3001/api
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Workspace:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        whatsappPhoneNumber:
          type: string
          nullable: true
        whatsappApiToken:
          type: string
          nullable: true
        whatsappWebhookUrl:
          type: string
          nullable: true
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        welcomeMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio di benvenuto multilingua
        wipMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio "Work in Progress" multilingua
        afterRegistrationMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio post-registrazione multilingua

    CreateWorkspaceRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        whatsappPhoneNumber:
          type: string
          nullable: true
        whatsappApiToken:
          type: string
          nullable: true
        whatsappWebhookUrl:
          type: string
          nullable: true
        welcomeMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio di benvenuto multilingua
        wipMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio "Work in Progress" multilingua
        afterRegistrationMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio post-registrazione multilingua

    UpdateWorkspaceRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        whatsappPhoneNumber:
          type: string
          nullable: true
        whatsappApiToken:
          type: string
          nullable: true
        whatsappWebhookUrl:
          type: string
          nullable: true
        isActive:
          type: boolean
        welcomeMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio di benvenuto multilingua
        wipMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio "Work in Progress" multilingua
        afterRegistrationMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio post-registrazione multilingua

    Error:
      type: object
      properties:
        status:
          type: string
          enum: [error]
        message:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        status:
          type: string
          enum: [ACTIVE, INACTIVE]
        lastLogin:
          type: string
          format: date-time
        workspaces:
          type: array
          items:
            $ref: "#/components/schemas/Workspace"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    OtpVerifyRequest:
      type: object
      required:
        - userId
        - otp
      properties:
        userId:
          type: string
          format: uuid
        otp:
          type: string
          minLength: 6
          maxLength: 6
          pattern: "^[0-9]{6}$"
          description: 6-digit OTP code received via email

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          description: Must contain at least 8 characters, one uppercase letter, one lowercase letter, one number and one special character
        firstName:
          type: string
        lastName:
          type: string

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    ResetPasswordRequest:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
        newPassword:
          type: string
          minLength: 8
          description: Must contain at least 8 characters, one uppercase letter, one lowercase letter, one number and one special character

    FAQ:
      type: object
      properties:
        id:
          type: string
          format: uuid
        question:
          type: string
          description: La domanda della FAQ
        answer:
          type: string
          description: La risposta alla domanda
        isActive:
          type: boolean
          description: Indica se la FAQ è attiva o disattiva
        workspaceId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateFAQRequest:
      type: object
      required:
        - question
        - answer
      properties:
        question:
          type: string
          description: La domanda della FAQ
        answer:
          type: string
          description: La risposta alla domanda
        isActive:
          type: boolean
          default: true
          description: Indica se la FAQ è attiva o disattiva

    UpdateFAQRequest:
      type: object
      properties:
        question:
          type: string
          description: La domanda della FAQ
        answer:
          type: string
          description: La risposta alla domanda
        isActive:
          type: boolean
          description: Indica se la FAQ è attiva o disattiva



paths:
  /workspaces:
    get:
      summary: List all workspaces
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of workspaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Workspace"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Create a new workspace
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWorkspaceRequest"
      responses:
        "201":
          description: Workspace created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /workspaces/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      summary: Get a workspace by ID
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Workspace details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update a workspace
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWorkspaceRequest"
      responses:
        "200":
          description: Workspace updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete a workspace
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Workspace deleted
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/login:
    post:
      summary: Step 1 - Login user
      description: First step of authentication - verify credentials and send OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: OTP sent to user's email
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  userId:
                    type: string
                    format: uuid
                  otp:
                    type: string
                    description: Only in development environment
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/verify-otp:
    post:
      summary: Step 2 - Verify OTP
      description: Second step of authentication - verify OTP and issue JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OtpVerifyRequest"
      responses:
        "200":
          description: OTP verified and login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid or expired OTP
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "429":
          description: Too many verification attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/register:
    post:
      summary: Register new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "429":
          description: Too many registration attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/me:
    get:
      summary: Get current user
      description: Get details of the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/forgot-password:
    post:
      summary: Request password reset
      description: Send a password reset token to the user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequest"
      responses:
        "200":
          description: Reset instructions sent (returns same message whether email exists or not)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "429":
          description: Too many reset attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/reset-password:
    post:
      summary: Reset password
      description: Reset user's password using the token received via email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
      responses:
        "200":
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /workspaces/{workspaceId}/faqs:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      summary: Lista di tutte le FAQ
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista delle FAQ per il workspace specificato
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FAQ"
        "401":
          description: Non autorizzato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Crea una nuova FAQ
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFAQRequest"
      responses:
        "201":
          description: FAQ creata con successo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FAQ"
        "400":
          description: Richiesta non valida
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Non autorizzato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /workspaces/{workspaceId}/faqs/{id}:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      summary: Ottiene una FAQ per ID
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Dettagli della FAQ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FAQ"
        "401":
          description: Non autorizzato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: FAQ non trovata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Aggiorna una FAQ
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFAQRequest"
      responses:
        "200":
          description: FAQ aggiornata con successo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FAQ"
        "400":
          description: Richiesta non valida
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Non autorizzato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: FAQ non trovata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Elimina una FAQ
      security:
        - bearerAuth: []
      responses:
        "200":
          description: FAQ eliminata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Non autorizzato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: FAQ non trovata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"



  /messages:
    post:
      summary: Process a customer message
      description: >
        Processes an incoming message from a WhatsApp user and returns a response.
        Now includes language detection that will automatically detect the language
        of the message and update the customer's language preference accordingly.
        This enables the system to respond in the customer's preferred language.
      tags:
        - Messages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
                - phoneNumber
                - workspaceId
              properties:
                message:
                  type: string
                  description: The message text from the customer
                  example: "Hello, I want to know more about your products"
                phoneNumber:
                  type: string
                  description: The phone number of the sender in international format
                  example: "+391234567890"
                workspaceId:
                  type: string
                  description: The ID of the workspace to process the message in
                  example: "clj1z6qxr0000qwzlgt7a02jm"
                sessionId:
                  type: string
                  description: Optional session ID for existing conversations
                  example: "clj1z6qxr0001qwzlgt7a02jm"
                isNewConversation:
                  type: boolean
                  description: Flag to indicate this is a new conversation
                  example: false
      responses:
        '200':
          description: Message processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      processedMessage:
                        type: string
                        example: "Thank you for your message. Our best-selling product is Italian extra virgin olive oil."
                      detectedLanguage:
                        type: string
                        description: The detected language of the customer's message
                        example: "en"
                      sessionId:
                        type: string
                        example: "clj1z6qxr0001qwzlgt7a02jm"
                      customerId:
                        type: string
                        example: "clj1z6qxr0002qwzlgt7a02jm"
        '400':
          description: Bad request - invalid parameters
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /registration/token/{token}:
    parameters:
      - name: token
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Validate registration token
      description: Validates a registration token to ensure it is valid and not expired
      responses:
        "200":
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                  phoneNumber:
                    type: string
                  workspaceId:
                    type: string
                  expiresAt:
                    type: string
                    format: date-time
        "400":
          description: Token is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /registration/register:
    post:
      summary: Register a new customer
      description: Registers a new customer with the provided information and sends welcome and after-registration messages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - first_name
                - last_name
                - company
                - phone
                - workspace_id
                - gdpr_consent
              properties:
                token:
                  type: string
                  description: Registration token received previously
                first_name:
                  type: string
                  description: Customer's first name
                last_name:
                  type: string
                  description: Customer's last name
                company:
                  type: string
                  description: Customer's company name
                phone:
                  type: string
                  description: Customer's phone number
                workspace_id:
                  type: string
                  description: ID of the workspace the customer is registering for
                language:
                  type: string
                  description: Customer's preferred language (e.g., 'English', 'Italian')
                currency:
                  type: string
                  description: Customer's preferred currency (e.g., 'EUR', 'USD')
                gdpr_consent:
                  type: boolean
                  description: Whether the customer has provided GDPR consent
                push_notifications_consent:
                  type: boolean
                  description: Whether the customer has consented to push notifications
      responses:
        "200":
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  customer:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      phone:
                        type: string
                  message:
                    type: string
        "400":
          description: Missing required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid or expired registration token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /registration/data-protection:
    get:
      summary: Get data protection information
      description: Retrieves information about data protection in the specified language
      parameters:
        - name: lang
          in: query
          required: false
          schema:
            type: string
            default: en
            enum: [en, it]
          description: Language for the data protection information
      responses:
        "200":
          description: Data protection information
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  content:
                    type: string
                  sections:
                    type: array
                    items:
                      type: object
                      properties:
                        title:
                          type: string
                        content:
                          type: string
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /workspaces/{workspaceId}/customers/{id}/block:
    post:
      tags:
        - Customers
      summary: Block a customer
      description: |
        Block a customer by setting isBlacklisted to true.
        
        **Automatic Spam Detection:**
        The system automatically detects and blocks spam behavior:
        - **Threshold**: 10 messages in 30 seconds
        - **Action**: Automatic blacklisting (customer.isBlacklisted = true + phone added to workspace.blocklist)
        - **Duration**: Unlimited (manual admin unlock required)
        - **Scope**: Both customer-level and workspace-level blocking
        
        When spam is detected:
        1. Customer is marked as blacklisted (if customer record exists)
        2. Phone number is added to workspace blocklist
        3. All future messages from that number are silently ignored
        4. Event is logged for audit purposes
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
          description: ID of the workspace
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the customer to block
      responses:
        '200':
          description: Customer blocked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Customer blocked successfully
                  customer:
                    $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
        '500':
          description: Server error
