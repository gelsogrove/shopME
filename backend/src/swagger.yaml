openapi: 3.0.0
info:
  title: ShopMe
  version: 1.0.0
  description: API for managing Italian products shop

servers:
  - url: http://localhost:3001/api
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    basicAuth:
      type: http
      scheme: basic
      description: Basic Authentication for N8N internal API (admin:admin)

  schemas:
    Workspace:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        whatsappPhoneNumber:
          type: string
          nullable: true
        whatsappApiToken:
          type: string
          nullable: true
        whatsappWebhookUrl:
          type: string
          nullable: true
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        welcomeMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio di benvenuto multilingua
        wipMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio "Work in Progress" multilingua
        afterRegistrationMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio post-registrazione multilingua

    CreateWorkspaceRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        whatsappPhoneNumber:
          type: string
          nullable: true
        whatsappApiToken:
          type: string
          nullable: true
        whatsappWebhookUrl:
          type: string
          nullable: true
        welcomeMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio di benvenuto multilingua
        wipMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio "Work in Progress" multilingua
        afterRegistrationMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio post-registrazione multilingua

    UpdateWorkspaceRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        whatsappPhoneNumber:
          type: string
          nullable: true
        whatsappApiToken:
          type: string
          nullable: true
        whatsappWebhookUrl:
          type: string
          nullable: true
        isActive:
          type: boolean
        welcomeMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio di benvenuto multilingua
        wipMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio "Work in Progress" multilingua
        afterRegistrationMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio post-registrazione multilingua

    Error:
      type: object
      properties:
        status:
          type: string
          enum: [error]
        message:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        status:
          type: string
          enum: [ACTIVE, INACTIVE]
        lastLogin:
          type: string
          format: date-time
        workspaces:
          type: array
          items:
            $ref: "#/components/schemas/Workspace"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    OtpVerifyRequest:
      type: object
      required:
        - userId
        - otp
      properties:
        userId:
          type: string
          format: uuid
        otp:
          type: string
          minLength: 6
          maxLength: 6
          pattern: "^[0-9]{6}$"
          description: 6-digit OTP code received via email

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          description: Must contain at least 8 characters, one uppercase letter, one lowercase letter, one number and one special character
        firstName:
          type: string
        lastName:
          type: string

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    ResetPasswordRequest:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
        newPassword:
          type: string
          minLength: 8
          description: Must contain at least 8 characters, one uppercase letter, one lowercase letter, one number and one special character

    FAQ:
      type: object
      properties:
        id:
          type: string
          format: uuid
        question:
          type: string
          description: La domanda della FAQ
        answer:
          type: string
          description: La risposta alla domanda
        isActive:
          type: boolean
          description: Indica se la FAQ è attiva o disattiva
        workspaceId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateFAQRequest:
      type: object
      required:
        - question
        - answer
      properties:
        question:
          type: string
          description: La domanda della FAQ
        answer:
          type: string
          description: La risposta alla domanda
        isActive:
          type: boolean
          default: true
          description: Indica se la FAQ è attiva o disattiva

    UpdateFAQRequest:
      type: object
      properties:
        question:
          type: string
          description: La domanda della FAQ
        answer:
          type: string
          description: La risposta alla domanda
        isActive:
          type: boolean
          description: Indica se la FAQ è attiva o disattiva

paths:
  /workspaces:
    get:
      summary: List all workspaces
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of workspaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Workspace"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Create a new workspace
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWorkspaceRequest"
      responses:
        "201":
          description: Workspace created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /workspaces/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      summary: Get a workspace by ID
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Workspace details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update a workspace
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWorkspaceRequest"
      responses:
        "200":
          description: Workspace updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete a workspace
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Workspace deleted
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/login:
    post:
      summary: Step 1 - Login user
      description: First step of authentication - verify credentials and send OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: OTP sent to user's email
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  userId:
                    type: string
                    format: uuid
                  otp:
                    type: string
                    description: Only in development environment
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/verify-otp:
    post:
      summary: Step 2 - Verify OTP
      description: Second step of authentication - verify OTP and issue JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OtpVerifyRequest"
      responses:
        "200":
          description: OTP verified and login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid or expired OTP
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "429":
          description: Too many verification attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/register:
    post:
      summary: Register new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "429":
          description: Too many registration attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/me:
    get:
      summary: Get current user
      description: Get details of the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/forgot-password:
    post:
      summary: Request password reset
      description: Send a password reset token to the user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequest"
      responses:
        "200":
          description: Reset instructions sent (returns same message whether email exists or not)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "429":
          description: Too many reset attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/reset-password:
    post:
      summary: Reset password
      description: Reset user's password using the token received via email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
      responses:
        "200":
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /workspaces/{workspaceId}/faqs:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      summary: Lista di tutte le FAQ
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista delle FAQ per il workspace specificato
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FAQ"
        "401":
          description: Non autorizzato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Crea una nuova FAQ
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFAQRequest"
      responses:
        "201":
          description: FAQ creata con successo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FAQ"
        "400":
          description: Richiesta non valida
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Non autorizzato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /workspaces/{workspaceId}/faqs/{id}:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      summary: Ottiene una FAQ per ID
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Dettagli della FAQ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FAQ"
        "401":
          description: Non autorizzato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: FAQ non trovata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Aggiorna una FAQ
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFAQRequest"
      responses:
        "200":
          description: FAQ aggiornata con successo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FAQ"
        "400":
          description: Richiesta non valida
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Non autorizzato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: FAQ non trovata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Elimina una FAQ
      security:
        - bearerAuth: []
      responses:
        "200":
          description: FAQ eliminata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Non autorizzato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: FAQ non trovata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /messages:
    post:
      summary: Process a customer message
      description: >
        Processes an incoming message from a WhatsApp user and returns a response.
        Now includes language detection that will automatically detect the language
        of the message and update the customer's language preference accordingly.
        This enables the system to respond in the customer's preferred language.
      tags:
        - Messages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
                - phoneNumber
                - workspaceId
              properties:
                message:
                  type: string
                  description: The message text from the customer
                  example: "Hello, I want to know more about your products"
                phoneNumber:
                  type: string
                  description: The phone number of the sender in international format
                  example: "+391234567890"
                workspaceId:
                  type: string
                  description: The ID of the workspace to process the message in
                  example: "clj1z6qxr0000qwzlgt7a02jm"
                sessionId:
                  type: string
                  description: Optional session ID for existing conversations
                  example: "clj1z6qxr0001qwzlgt7a02jm"
                isNewConversation:
                  type: boolean
                  description: Flag to indicate this is a new conversation
                  example: false
      responses:
        "200":
          description: Message processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      processedMessage:
                        type: string
                        example: "Thank you for your message. Our best-selling product is Italian extra virgin olive oil."
                      detectedLanguage:
                        type: string
                        description: The detected language of the customer's message
                        example: "en"
                      sessionId:
                        type: string
                        example: "clj1z6qxr0001qwzlgt7a02jm"
                      customerId:
                        type: string
                        example: "clj1z6qxr0002qwzlgt7a02jm"
        "400":
          description: Bad request - invalid parameters
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /registration/token/{token}:
    parameters:
      - name: token
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Validate registration token
      description: Validates a registration token to ensure it is valid and not expired
      responses:
        "200":
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                  phoneNumber:
                    type: string
                  workspaceId:
                    type: string
                  expiresAt:
                    type: string
                    format: date-time
        "400":
          description: Token is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /registration/register:
    post:
      summary: Register a new customer
      description: Registers a new customer with the provided information and sends welcome and after-registration messages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - first_name
                - last_name
                - company
                - phone
                - workspace_id
                - gdpr_consent
              properties:
                token:
                  type: string
                  description: Registration token received previously
                first_name:
                  type: string
                  description: Customer's first name
                last_name:
                  type: string
                  description: Customer's last name
                company:
                  type: string
                  description: Customer's company name
                phone:
                  type: string
                  description: Customer's phone number
                workspace_id:
                  type: string
                  description: ID of the workspace the customer is registering for
                language:
                  type: string
                  description: Customer's preferred language (e.g., 'English', 'Italian')
                currency:
                  type: string
                  description: Customer's preferred currency (e.g., 'EUR', 'USD')
                gdpr_consent:
                  type: boolean
                  description: Whether the customer has provided GDPR consent
                push_notifications_consent:
                  type: boolean
                  description: Whether the customer has consented to push notifications
      responses:
        "200":
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  customer:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      phone:
                        type: string
                  message:
                    type: string
        "400":
          description: Missing required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid or expired registration token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /registration/data-protection:
    get:
      summary: Get data protection information
      description: Retrieves information about data protection in the specified language
      parameters:
        - name: lang
          in: query
          required: false
          schema:
            type: string
            default: en
            enum: [en, it]
          description: Language for the data protection information
      responses:
        "200":
          description: Data protection information
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  content:
                    type: string
                  sections:
                    type: array
                    items:
                      type: object
                      properties:
                        title:
                          type: string
                        content:
                          type: string
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /workspaces/{workspaceId}/customers/{id}/block:
    post:
      tags:
        - Customers
      summary: Block a customer
      description: |
        Block a customer by setting isBlacklisted to true.

        **Automatic Spam Detection:**
        The system automatically detects and blocks spam behavior:
        - **Threshold**: 10 messages in 30 seconds
        - **Action**: Automatic blacklisting (customer.isBlacklisted = true + phone added to workspace.blocklist)
        - **Duration**: Unlimited (manual admin unlock required)
        - **Scope**: Both customer-level and workspace-level blocking

        When spam is detected:
        1. Customer is marked as blacklisted (if customer record exists)
        2. Phone number is added to workspace blocklist
        3. All future messages from that number are silently ignored
        4. Event is logged for audit purposes
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
          description: ID of the workspace
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the customer to block
      responses:
        "200":
          description: Customer blocked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Customer blocked successfully
                  customer:
                    $ref: "#/components/schemas/Customer"
        "404":
          description: Customer not found
        "500":
          description: Server error

  # Internal API Endpoints
  /internal/get-active-offers:
    post:
      tags:
        - Internal API
      summary: Get all active offers for a workspace (N8N Tool)
      description: |
        Returns all active offers for a workspace, used by the N8N workflow as a tool function.
        This endpoint is called when users ask about current offers, promotions, or discounts.

        **Authentication**: Requires Basic Auth (admin:admin) for N8N workflow compatibility.

        **Use Cases**:
        - User asks: "Che offerte avete?"
        - User asks: "Ci sono promozioni attive?"
        - User asks: "Avete sconti speciali?"
        - User asks: "What offers do you have?"

        **Response Format**: Returns formatted message ready for chatbot display.
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - workspaceId
              properties:
                workspaceId:
                  type: string
                  description: ID of the workspace to get offers for
                  example: "cm9hjgq9v00014qk8fsdy4ujv"
      responses:
        "200":
          description: Active offers retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  total_offers:
                    type: integer
                    example: 2
                  offers:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "offer-uuid-123"
                        name:
                          type: string
                          example: "Offerta Estiva 2025"
                        description:
                          type: string
                          example: "Sconto speciale del 20% su tutte le bevande per l'estate!"
                        discountPercent:
                          type: number
                          example: 20
                        startDate:
                          type: string
                          format: date-time
                          example: "2025-07-01T00:00:00.000Z"
                        endDate:
                          type: string
                          format: date-time
                          example: "2025-09-30T23:59:59.999Z"
                        categories:
                          type: array
                          items:
                            type: string
                          example: ["Beverages"]
                        isForAllCategories:
                          type: boolean
                          example: false
                  response_message:
                    type: string
                    example: "🎉 **Offerte attive al momento:**\n\n✨ **Offerta Estiva 2025** - 20% di sconto sulle categorie: Beverages\n📝 Sconto speciale del 20% su tutte le bevande per l'estate!\n📅 Valida fino al 30/09/2025\n\n"
        "400":
          description: Bad request - missing workspaceId
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "workspaceId is required"
        "401":
          description: Unauthorized - invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid internal API credentials"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error getting active offers"

  /internal/confirm-order-conversation:
    post:
      tags:
        - Internal API
      summary: Confirm order from conversation and generate checkout link
      description: |
        **🛒 CONVERSATIONAL ORDER FLOW** - Confirma ordine da conversazione WhatsApp e genera link checkout sicuro.
        
        **Flusso Completo**:
        1. Cliente conferma ordine in WhatsApp ("Confermo", "Procedi")
        2. N8N chiama questa API con conversazione + prodotti
        3. Backend genera token sicuro con carrello + indirizzi
        4. Ritorna URL checkout con token universale: `http://localhost:3000/checkout?token=...`
        
        **Token Payload**:
        - Customer data (id, name, phone, address)
        - Prodotti selezionati (codice, quantità, prezzo)
        - Indirizzi di spedizione e fatturazione
        - Workspace isolation
        
        **Sicurezza**:
        - Token 32 caratteri, 1 ora validità
        - Workspace isolation automatica
        - One-time use (marked as used)
        
        **Deterministico**: Stesso input → Stesso output
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - customerId
                - workspaceId
                - prodottiSelezionati
              properties:
                customerId:
                  type: string
                  description: ID del cliente
                  example: "customer-123"
                workspaceId:
                  type: string
                  description: ID del workspace
                  example: "cm9hjgq9v00014qk8fsdy4ujv"
                conversationContext:
                  type: string
                  description: Ultimi messaggi della conversazione per contesto
                  example: "Cliente: Metti 4 mozzarelle\nAI: Aggiunto al carrello\nCliente: Confermo"
                prodottiSelezionati:
                  type: array
                  description: Prodotti identificati nella conversazione
                  items:
                    type: object
                    required:
                      - nome
                      - quantita
                    properties:
                      nome:
                        type: string
                        description: Nome prodotto come menzionato dal cliente
                        example: "Mozzarella di Bufala Campana DOP"
                      quantita:
                        type: number
                        description: Quantità richiesta dal cliente
                        example: 4
                      descrizione:
                        type: string
                        description: Descrizione aggiuntiva se fornita
                        example: "Mozzarella di Bufala Campana DOP"
                      codice:
                        type: string
                        description: Codice prodotto se menzionato
                        example: "MOZ001"
      responses:
        "200":
          description: Checkout link generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  checkoutToken:
                    type: string
                    description: Token sicuro per accesso checkout
                    example: "abc123def456ghi789jkl012mno345"
                  checkoutUrl:
                    type: string
                    description: URL completo per pagina checkout
                    example: "http://localhost:3000/checkout?token=abc123def456ghi789jkl012mno345"
                  totalAmount:
                    type: number
                    format: float
                    description: Totale calcolato dell'ordine
                    example: 34.00
                  expiresAt:
                    type: string
                    format: date-time
                    description: Scadenza token
                    example: "2024-12-01T12:00:00Z"
                  response:
                    type: string
                    description: Messaggio di conferma per utente
                    example: "✅ Ordine confermato! Ecco il link per completare il tuo ordine: http://localhost:3000/checkout?token=abc123..."
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Customer not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid internal API credentials"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Internal server error confirming order"

  /checkout/validate:
    get:
      tags:
        - Checkout
      summary: Validate universal token and return order data
      description: |
        **🚀 KISS TOKEN VALIDATION** - Valida token universale (qualsiasi tipo) e ritorna dati ordine.
        
        **Utilizzo**:
        - Frontend chiama questa API per validare token
        - Ritorna customer + prodotti se token valido
        - Gestisce errori (scaduto, non valido, già usato)
        
        **Response**:
        - Customer data (id, name, phone, address)
        - Prodotti nel carrello (codice, quantità, prezzo)
        - Indirizzi di spedizione e fatturazione
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
          description: Universal token to validate (any type accepted)
          example: "abc123def456ghi789jkl012mno345"
      responses:
        "200":
          description: Token validated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  valid:
                    type: boolean
                    example: true
                  customer:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "customer-123"
                      name:
                        type: string
                        example: "Maria Garcia"
                      phone:
                        type: string
                        example: "+34666777888"
                      email:
                        type: string
                        example: "maria.garcia@shopme.com"
                      address:
                        type: object
                        properties:
                          name:
                            type: string
                            example: "Maria Garcia"
                          street:
                            type: string
                            example: "Via Roma 123"
                          city:
                            type: string
                            example: "Milano"
                          postalCode:
                            type: string
                            example: "20100"
                      invoiceAddress:
                        type: object
                        properties:
                          name:
                            type: string
                            example: "Maria Garcia"
                          street:
                            type: string
                            example: "Via Roma 123"
                          city:
                            type: string
                            example: "Milano"
                          postalCode:
                            type: string
                            example: "20100"
                  prodotti:
                    type: array
                    items:
                      type: object
                      properties:
                        codice:
                          type: string
                          example: "MOZ001"
                        descrizione:
                          type: string
                          example: "Mozzarella di Bufala Campana DOP"
                        qty:
                          type: number
                          example: 4
                        prezzo:
                          type: number
                          format: float
                          example: 8.50
                        productId:
                          type: string
                          example: "product-123"
                  expiresAt:
                    type: string
                    format: date-time
                    example: "2024-12-01T12:00:00Z"
        "400":
          description: Invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  valid:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Token is required"
        "401":
          description: Token expired or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  valid:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Token expired or invalid"
        "410":
          description: Token already used
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  valid:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Token already used"

  /checkout/submit:
    post:
      tags:
        - Checkout
      summary: Submit order and create final order
      description: |
        **✅ ORDER SUBMISSION** - Invia ordine finale e crea record nel database.
        
        **Flusso**:
        1. Frontend invia dati completi (token + prodotti + indirizzi)
        2. Backend valida token e dati
        3. Crea ordine nel database
        4. Invia notifiche email/WhatsApp
        5. Marca token come usato
        
        **Dati Richiesti**:
        - Token checkout valido
        - Prodotti finali (quantità, prezzi)
        - Indirizzi di spedizione e fatturazione
        - Note aggiuntive (opzionale)
        
        **Response**:
        - Order ID e codice ordine
        - Conferma successo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - prodotti
                - shippingAddress
              properties:
                token:
                  type: string
                  description: Checkout token
                  example: "abc123def456ghi789jkl012mno345"
                prodotti:
                  type: array
                  description: Prodotti finali dell'ordine
                  items:
                    type: object
                    required:
                      - codice
                      - descrizione
                      - qty
                      - prezzo
                    properties:
                      codice:
                        type: string
                        example: "MOZ001"
                      descrizione:
                        type: string
                        example: "Mozzarella di Bufala Campana DOP"
                      qty:
                        type: number
                        example: 4
                      prezzo:
                        type: number
                        format: float
                        example: 8.50
                      productId:
                        type: string
                        example: "product-123"
                shippingAddress:
                  type: object
                  required:
                    - name
                    - street
                    - city
                    - postalCode
                  properties:
                    name:
                      type: string
                      example: "Maria Garcia"
                    street:
                      type: string
                      example: "Via Roma 123"
                    city:
                      type: string
                      example: "Milano"
                    postalCode:
                      type: string
                      example: "20100"
                    country:
                      type: string
                      example: "Italia"
                billingAddress:
                  type: object
                  description: Indirizzo di fatturazione (opzionale, usa shipping se non fornito)
                  properties:
                    name:
                      type: string
                      example: "Maria Garcia"
                    street:
                      type: string
                      example: "Via Roma 123"
                    city:
                      type: string
                      example: "Milano"
                    postalCode:
                      type: string
                      example: "20100"
                    country:
                      type: string
                      example: "Italia"
                notes:
                  type: string
                  description: Note aggiuntive per l'ordine
                  example: "Consegna al piano terra"
      responses:
        "200":
          description: Order submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  orderId:
                    type: string
                    description: ID dell'ordine creato
                    example: "order-789"
                  orderCode:
                    type: string
                    description: Codice ordine univoco
                    example: "ORD-20241201-001"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Invalid token or missing data"
        "401":
          description: Token expired or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Token expired or invalid"
        "410":
          description: Token already used
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Token already used"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Internal server error creating order"

  /internal/generate-token:
    post:
      tags:
        - Internal API
      summary: Generate secure tokens for various purposes (checkout, invoice, cart, orders)
      description: |
        Generates secure tokens for accessing different parts of the system via secure links.
        This endpoint is called by N8N workflow when creating secure links for customers.

        **Authentication**: Requires Basic Auth (admin:admin) for N8N workflow compatibility.

        **Supported Actions**:
        - `checkout`: Creates checkout link with cart data (1h validity)
        - `invoice`: Creates invoice access link (24h validity)
        - `cart`: Creates cart access link (2h validity)
        - `orders`: Creates orders history access link (1h validity)

        **Token Security**:
        - Tokens are encrypted and stored in database
        - Auto-cleanup of expired tokens
        - Workspace isolation enforced
        - Customer-specific access control
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - customerId
                - action
              properties:
                customerId:
                  type: string
                  description: ID of the customer
                  example: "customer123"
                action:
                  type: string
                  enum: [checkout, invoice, cart, orders]
                  description: Type of token to generate
                  example: "orders"
                workspaceId:
                  type: string
                  description: ID of the workspace (optional, uses customer's workspace if not provided)
                  example: "cm9hjgq9v00014qk8fsdy4ujv"
                metadata:
                  type: object
                  description: Additional metadata for the token
                  example: { "orderCode": "ORD-2025-001" }
      responses:
        "200":
          description: Token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    description: Generated secure token
                    example: "abc123def456ghi789"
                  expiresAt:
                    type: string
                    format: date-time
                    description: Token expiration time
                    example: "2024-01-16T10:30:00Z"
                  linkUrl:
                    type: string
                    description: Complete URL with token
                    example: "https://app.example.com/orders?token=abc123def456ghi789"
                  action:
                    type: string
                    example: "orders"
                  customerId:
                    type: string
                    example: "customer123"
                  workspaceId:
                    type: string
                    example: "cm9hjgq9v00014qk8fsdy4ujv"
        "400":
          description: Bad request - missing required fields or unsupported action
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "customerId and action are required"
        "404":
          description: Customer not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Customer not found"
        "403":
          description: Customer does not belong to this workspace
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Customer does not belong to this workspace"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

  /internal/orders:
    post:
      tags:
        - Internal API
      summary: Create order via WhatsApp chatbot with intelligent cart auto-extraction
      description: |
        Creates a new order from WhatsApp conversation with intelligent cart auto-extraction system.
        This endpoint is called by N8N workflow when users confirm orders through the chatbot.

        **Authentication**: Requires Basic Auth (admin:admin) for N8N workflow compatibility.

        **Intelligent Cart Auto-Extraction**:
        The system implements a revolutionary dual-strategy approach for cart management:
        
        1. **Primary Strategy**: Use LLM-provided items array if available and valid
        2. **Fallback Strategy**: Intelligent conversation history parsing when LLM fails
        
        **Auto-Extraction Process**:
        - Scans last 10 conversation messages for cart table patterns
        - Uses regex pattern matching: "00004 | Mozzarella | €9.99 | 4 | €39.96"
        - Automatically formats extracted items for backend compatibility
        - Ensures 100% order success rate (no empty items arrays)
        
        **Pattern Recognition**:
        ```
        Format: ProductCode | ProductName | €UnitPrice | Quantity | €TotalPrice
        Example: 00004 | Mozzarella di Bufala Campana DOP | €9.99 | 4 | €39.96
        ```

        **Use Cases**:
        - User adds items: "metti 4 mozzarelle nel carrello"
        - User confirms: "confermo ordine"
        - LLM shows cart correctly but fails to pass items to backend
        - Auto-extraction activates and parses conversation history
        - Order created with correct items automatically

        **Error Handling**:
        - If auto-extraction fails, creates debug item for monitoring
        - Comprehensive logging for troubleshooting
        - Never creates orders with completely empty items arrays
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - workspaceId
                - customerId
              properties:
                workspaceId:
                  type: string
                  description: ID of the workspace
                  example: "cm9hjgq9v00014qk8fsdy4ujv"
                customerId:
                  type: string
                  description: ID of the customer placing the order
                  example: "customer123"
                  trackingNumber:
                    type: string
                    description: Optional tracking number for shipment
                    example: "1Z999AA10123456784"
                  items:
                    type: array
                    description: |
                      Array of order items. Can be provided by LLM or auto-extracted from conversation.
                      Supports both itemType/productCode and type/id formats for backward compatibility.
                    items:
                      type: object
                      properties:
                        itemType:
                          type: string
                          enum: [PRODUCT, SERVICE, ERROR]
                          description: Type of item (primary format)
                          example: "PRODUCT"
                        type:
                          type: string
                          enum: [PRODUCT, SERVICE, ERROR]
                          description: Type of item (fallback compatibility)
                          example: "PRODUCT"
                        productCode:
                          type: string
                          description: Product code (primary format)
                          example: "00004"
                        id:
                          type: string
                          description: Product ID (fallback compatibility)
                          example: "00004"
                        name:
                          type: string
                          description: Product name as displayed in cart
                          example: "Mozzarella di Bufala Campana DOP"
                        quantity:
                          type: integer
                          description: Quantity ordered
                          example: 4
                        unitPrice:
                          type: number
                          format: float
                          description: Unit price per item
                          example: 9.99
                notes:
                  type: string
                  description: Additional order notes
                  example: "Ordine via WhatsApp chatbot con sistema auto-extraction"
                conversationHistory:
                  type: array
                  description: Conversation messages for auto-extraction (used by N8N internally)
                  items:
                    type: object
                    properties:
                      role:
                        type: string
                        enum: [user, assistant]
                        example: "assistant"
                      content:
                        type: string
                        example: "🛒 Carrello: 00004 | Mozzarella di Bufala Campana DOP | €9.99 | 4 | €39.96"
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  orderId:
                    type: string
                    example: "order-uuid-123"
                  message:
                    type: string
                    example: "Order created successfully"
                  totalAmount:
                    type: number
                    format: float
                    example: 39.96
                  itemsCount:
                    type: integer
                    example: 1
                  autoExtractionUsed:
                    type: boolean
                    description: Whether auto-extraction was used for this order
                    example: true
                  extractedItems:
                    type: array
                    description: Items that were auto-extracted (for debugging)
                    items:
                      type: object
                      properties:
                        source:
                          type: string
                          enum: [LLM, AUTO_EXTRACTION, ERROR_FALLBACK]
                          example: "AUTO_EXTRACTION"
                        productCode:
                          type: string
                          example: "00004"
                        name:
                          type: string
                          example: "Mozzarella di Bufala Campana DOP"
                        quantity:
                          type: integer
                          example: 4
                        unitPrice:
                          type: number
                          example: 9.99
        "400":
          description: Bad request - validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "workspaceId and customerId are required"
        "401":
          description: Unauthorized - invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid internal API credentials"
        "422":
          description: Validation error - empty items array after auto-extraction
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Cannot create order with empty items array"
                  autoExtractionAttempted:
                    type: boolean
                    example: true
                  conversationAnalyzed:
                    type: boolean
                    example: true
                  debugInfo:
                    type: string
                    example: "No cart patterns found in conversation history"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error creating order"

  /internal/customer-profile/{token}:
    get:
      tags: [Internal API]
      summary: Get customer profile data for profile management page
      security:
        - InternalAuth: []
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: Secure token for profile access
      responses:
        200:
          description: Customer profile data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      phone:
                        type: string
                      company:
                        type: string
                      address:
                        type: string
                      language:
                        type: string
                      currency:
                        type: string
                      discount:
                        type: number
                      invoiceAddress:
                        type: object
                      createdAt:
                        type: string
                      updatedAt:
                        type: string
        400:
          description: Token is required
        401:
          description: Invalid or expired token
        404:
          description: Customer not found
        500:
          description: Internal server error
    put:
      tags: [Internal API]
      summary: Update customer profile data from profile management page
      security:
        - InternalAuth: []
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: Secure token for profile access
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                company:
                  type: string
                address:
                  type: string
                language:
                  type: string
                currency:
                  type: string
                invoiceAddress:
                  type: object
      responses:
        200:
          description: Customer profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
        400:
          description: Token is required or invalid data
        401:
          description: Invalid or expired token
        404:
          description: Customer not found
        500:
          description: Internal server error
