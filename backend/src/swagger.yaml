openapi: 3.0.0
info:
  title: ShopMe
  version: 1.0.0
  description: API for managing Italian products shop

servers:
  - url: http://localhost:3001/api
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Workspace:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        whatsappPhoneNumber:
          type: string
          nullable: true
        whatsappApiToken:
          type: string
          nullable: true
        whatsappWebhookUrl:
          type: string
          nullable: true
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        welcomeMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio di benvenuto multilingua
        wipMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio "Work in Progress" multilingua

    CreateWorkspaceRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        whatsappPhoneNumber:
          type: string
          nullable: true
        whatsappApiToken:
          type: string
          nullable: true
        whatsappWebhookUrl:
          type: string
          nullable: true
        welcomeMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio di benvenuto multilingua
        wipMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio "Work in Progress" multilingua

    UpdateWorkspaceRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        whatsappPhoneNumber:
          type: string
          nullable: true
        whatsappApiToken:
          type: string
          nullable: true
        whatsappWebhookUrl:
          type: string
          nullable: true
        isActive:
          type: boolean
        welcomeMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio di benvenuto multilingua
        wipMessages:
          type: object
          additionalProperties:
            type: string
          description: Messaggio "Work in Progress" multilingua

    Error:
      type: object
      properties:
        status:
          type: string
          enum: [error]
        message:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        status:
          type: string
          enum: [ACTIVE, INACTIVE]
        lastLogin:
          type: string
          format: date-time
        workspaces:
          type: array
          items:
            $ref: "#/components/schemas/Workspace"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    OtpVerifyRequest:
      type: object
      required:
        - userId
        - otp
      properties:
        userId:
          type: string
          format: uuid
        otp:
          type: string
          minLength: 6
          maxLength: 6
          pattern: "^[0-9]{6}$"
          description: 6-digit OTP code received via email

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          description: Must contain at least 8 characters, one uppercase letter, one lowercase letter, one number and one special character
        firstName:
          type: string
        lastName:
          type: string

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    ResetPasswordRequest:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
        newPassword:
          type: string
          minLength: 8
          description: Must contain at least 8 characters, one uppercase letter, one lowercase letter, one number and one special character

    FAQ:
      type: object
      properties:
        id:
          type: string
          format: uuid
        question:
          type: string
          description: La domanda della FAQ
        answer:
          type: string
          description: La risposta alla domanda
        isActive:
          type: boolean
          description: Indica se la FAQ è attiva o disattiva
        workspaceId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateFAQRequest:
      type: object
      required:
        - question
        - answer
      properties:
        question:
          type: string
          description: La domanda della FAQ
        answer:
          type: string
          description: La risposta alla domanda
        isActive:
          type: boolean
          default: true
          description: Indica se la FAQ è attiva o disattiva

    UpdateFAQRequest:
      type: object
      properties:
        question:
          type: string
          description: La domanda della FAQ
        answer:
          type: string
          description: La risposta alla domanda
        isActive:
          type: boolean
          description: Indica se la FAQ è attiva o disattiva

paths:
  /workspaces:
    get:
      summary: List all workspaces
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of workspaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Workspace"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Create a new workspace
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWorkspaceRequest"
      responses:
        "201":
          description: Workspace created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /workspaces/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      summary: Get a workspace by ID
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Workspace details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update a workspace
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWorkspaceRequest"
      responses:
        "200":
          description: Workspace updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete a workspace
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Workspace deleted
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/login:
    post:
      summary: Step 1 - Login user
      description: First step of authentication - verify credentials and send OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: OTP sent to user's email
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  userId:
                    type: string
                    format: uuid
                  otp:
                    type: string
                    description: Only in development environment
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/verify-otp:
    post:
      summary: Step 2 - Verify OTP
      description: Second step of authentication - verify OTP and issue JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OtpVerifyRequest"
      responses:
        "200":
          description: OTP verified and login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid or expired OTP
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "429":
          description: Too many verification attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/register:
    post:
      summary: Register new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "429":
          description: Too many registration attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/me:
    get:
      summary: Get current user
      description: Get details of the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/forgot-password:
    post:
      summary: Request password reset
      description: Send a password reset token to the user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequest"
      responses:
        "200":
          description: Reset instructions sent (returns same message whether email exists or not)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "429":
          description: Too many reset attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/reset-password:
    post:
      summary: Reset password
      description: Reset user's password using the token received via email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
      responses:
        "200":
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /workspaces/{workspaceId}/faqs:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      summary: Lista di tutte le FAQ
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista delle FAQ per il workspace specificato
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FAQ"
        "401":
          description: Non autorizzato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Crea una nuova FAQ
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFAQRequest"
      responses:
        "201":
          description: FAQ creata con successo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FAQ"
        "400":
          description: Richiesta non valida
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Non autorizzato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /workspaces/{workspaceId}/faqs/{id}:
    parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      summary: Ottiene una FAQ per ID
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Dettagli della FAQ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FAQ"
        "401":
          description: Non autorizzato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: FAQ non trovata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Aggiorna una FAQ
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFAQRequest"
      responses:
        "200":
          description: FAQ aggiornata con successo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FAQ"
        "400":
          description: Richiesta non valida
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Non autorizzato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: FAQ non trovata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Elimina una FAQ
      security:
        - bearerAuth: []
      responses:
        "200":
          description: FAQ eliminata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Non autorizzato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: FAQ non trovata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
