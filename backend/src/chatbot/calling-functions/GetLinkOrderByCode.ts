import { PrismaClient } from "@prisma/client"
import { config } from "../../config"
import { SecureTokenService } from "../../application/services/secure-token.service"

const prisma = new PrismaClient()

export interface GetLinkOrderByCodeParams {
  customerId: string
  workspaceId: string
  orderCode?: string
  documentType?: "invoice" | "ddt" | "order"
  language?: string
}

export interface GetLinkOrderByCodeResponse {
  success: boolean
  response?: string
  link?: string
  message?: string
  orderCode?: string
  orderStatus?: string
  error?: string
}

export async function GetLinkOrderByCode(
  params: GetLinkOrderByCodeParams
): Promise<GetLinkOrderByCodeResponse> {
  try {
    const {
      customerId,
      workspaceId,
      orderCode,
      documentType = "order",
      language = "it",
    } = params

    console.log(
      `üîó GetLinkOrderByCode: customerId=${customerId}, workspaceId=${workspaceId}, orderCode=${orderCode}, documentType=${documentType}`
    )

    let targetOrder

    if (orderCode) {
      // Cerca ordine specifico per codice
      targetOrder = await prisma.orders.findFirst({
        where: {
          orderCode: orderCode,
          customerId: customerId,
          workspaceId: workspaceId,
        },
        orderBy: { createdAt: "desc" },
      })

      if (!targetOrder) {
        // Sanitize orderCode: avoid returning template tokens like '{{lastordercode}}'
        const sanitizedCode =
          typeof orderCode === "string" && /{{.*}}/.test(orderCode)
            ? "<unknown-order-code>"
            : orderCode

        return {
          success: false,
          error: `Order ${sanitizedCode} not found for this customer`,
        }
      }
    } else {
      // Cerca ultimo ordine
      targetOrder = await prisma.orders.findFirst({
        where: {
          customerId: customerId,
          workspaceId: workspaceId,
        },
        orderBy: { createdAt: "desc" },
      })

      if (!targetOrder) {
        return {
          success: false,
          error: "No orders found for this customer",
        }
      }
    }

    // Genera token sicuro per l'ordine usando SecureTokenService
    const secureTokenService = new SecureTokenService()
    const token = await secureTokenService.createToken(
      "orders",
      workspaceId,
      { orderId: targetOrder.id, customerId, workspaceId },
      "1h",
      undefined,
      undefined,
      undefined,
      customerId
    )

    // Determina il link in base al tipo di documento
    let link: string

    // Only return a structured link & metadata. The human-readable message must be generated by the Formatter.
    try {
      // Use centralized link generator for consistent URL shortening
      const {
        linkGeneratorService,
      } = require("../../application/services/link-generator.service")

      // Extract order code if available
      const orderCode = targetOrder?.orderCode || undefined

      // Generate short link using centralized service
      link = await linkGeneratorService.generateOrdersLink(
        token,
        workspaceId,
        orderCode
      )
    } catch (err) {
      // fallback to original behaviour
      link = `${config.frontendUrl}/orders-public?token=${token}`
    }

    console.log(
      `üîó GetLinkOrderByCode: Generated link for order ${targetOrder.orderCode}: ${link}`
    )

    return {
      success: true,
      link: link,
      orderCode: targetOrder.orderCode,
      orderStatus: targetOrder.status,
    }
  } catch (error) {
    console.error("‚ùå GetLinkOrderByCode error:", error)
    return {
      success: false,
      error: "Failed to generate order link",
    }
  }
}
