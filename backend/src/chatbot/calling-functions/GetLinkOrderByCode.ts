import { PrismaClient } from "@prisma/client"

const prisma = new PrismaClient()

export interface GetLinkOrderByCodeParams {
  customerId: string
  workspaceId: string
  orderCode?: string
  documentType?: "invoice" | "ddt" | "order"
  language?: string
}

export interface GetLinkOrderByCodeResponse {
  success: boolean
  response?: string
  link?: string
  message?: string
  orderCode?: string
  orderStatus?: string
  error?: string
}

export async function GetLinkOrderByCode(
  params: GetLinkOrderByCodeParams
): Promise<GetLinkOrderByCodeResponse> {
  try {
    const {
      customerId,
      workspaceId,
      orderCode,
      documentType = "order",
      language = "it",
    } = params

    console.log(
      `üîó GetLinkOrderByCode: customerId=${customerId}, workspaceId=${workspaceId}, orderCode=${orderCode}, documentType=${documentType}`
    )

    let targetOrder

    if (orderCode) {
      // Cerca ordine specifico per codice
      targetOrder = await prisma.orders.findFirst({
        where: {
          orderCode: orderCode,
          customerId: customerId,
          workspaceId: workspaceId,
        },
        orderBy: { createdAt: "desc" },
      })

      if (!targetOrder) {
        return {
          success: false,
          error: `Order ${orderCode} not found for this customer`,
        }
      }
    } else {
      // Cerca ultimo ordine
      targetOrder = await prisma.orders.findFirst({
        where: {
          customerId: customerId,
          workspaceId: workspaceId,
        },
        orderBy: { createdAt: "desc" },
      })

      if (!targetOrder) {
        return {
          success: false,
          error: "No orders found for this customer",
        }
      }
    }

    // Genera token sicuro per l'ordine
    const token = generateSecureToken(targetOrder.id, customerId, workspaceId)

    // Determina il link in base al tipo di documento
    let link: string

    // Only return a structured link & metadata. The human-readable message must be generated by the Formatter.
    link = `http://localhost:3000/orders-public?token=${token}`

    console.log(
      `üîó GetLinkOrderByCode: Generated link for order ${targetOrder.orderCode}: ${link}`
    )

    return {
      success: true,
      link: link,
      orderCode: targetOrder.orderCode,
      orderStatus: targetOrder.status,
    }
  } catch (error) {
    console.error("‚ùå GetLinkOrderByCode error:", error)
    return {
      success: false,
      error: "Failed to generate order link",
    }
  }
}

function generateSecureToken(
  orderId: string,
  customerId: string,
  workspaceId: string
): string {
  // Genera un token sicuro basato su orderId, customerId e workspaceId
  const crypto = require("crypto")
  const data = `${orderId}-${customerId}-${workspaceId}-${Date.now()}`
  return crypto.createHash("sha256").update(data).digest("hex")
}
